<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_charakter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_charakter_collision_box</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats

//Schatten
//Schatten
shadow_object = scr_init_shadow(
    self,
    sprite_get_width(sprite_index)/2,
    sprite_get_width(sprite_index)/5,
    sprite_get_height(sprite_index)/2 - 3,
    );

//Höhe und Breite des Sprite
spr_height = sprite_get_height(sprite_index)/2;
spr_width = sprite_get_width(sprite_index)/2;

//Bewegung
x_axis = 0;
y_axis = 0;

move_x = 0;
move_y = 0;

isSprinting = false;
is_crouching = false;

//Achse
attack_axis = 1;

x_axis_old = 0;
y_axis_old = 0;

//damage
dealt_damage = 0;
damage_count = 0;
old_dealt_damage = 0;

//heal
dealt_heal = 0;
heal_count = 0;
old_dealt_heal = 0;

//Sprites
sprite_front = spr_charakter;
sprite_back = spr_charakter_back;

sprite_front_old = sprite_front;
sprite_back_old = sprite_back;

//y_offset
y_bullet_offset = 30;
y_melee_offset = 30;








</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setze Animations-Speed
image_speed = 8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rauch Alarm
alarm_set(2, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kollisionsmasken
collision_mask = spr_charakter_collision_box;
battle_mask = spr_charakter;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Überprüfe, ob sich erlittener damage/heal ändern
old_dealt_damage = dealt_damage;

old_dealt_heal = dealt_heal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bewegung
//X-Achse (+ für rechts und - für links)
x_axis = -admin.left_key + admin.right_key;
//Keine Taste wird gedrückt: Achse bekommt Vorzeichen des vorherigen move_x
if(!admin.left_key &amp;&amp; !admin.right_key) x_axis = sign(move_x);
//move = vorzeichen der achse multipliziert mit dem Startspeed
if(move_x == 0) {
    if(admin.right_key || admin.left_key) {
        move_x = x_axis * player_stats.player_speed;
    }
}

//Beschleunigung
if(admin.left_key) { 
    move_x += player_stats.player_acc * x_axis;
}
if(admin.right_key) { 
    move_x += player_stats.player_acc * x_axis;
}
//Friciton
if(!admin.left_key &amp;&amp; !admin.right_key) {
    move_x -= player_stats.player_friction * x_axis;
        if(sign(move_x) == -1 &amp;&amp; x_axis == 1) move_x = 0;
        if(sign(move_x) == 1 &amp;&amp; x_axis == -1) move_x = 0;
}
//Maxspeed
if(x_axis == 1) {    
    if(move_x &gt; player_stats.max_player_speed)
    {
        move_x = player_stats.max_player_speed;
    }
}
if(x_axis == -1) {    
    if(move_x &lt; -player_stats.max_player_speed)
    {
        move_x = -player_stats.max_player_speed;
    }
}
//Minspeed
if(x_axis == 1) {    
    if(move_x &lt; 0)
    {
        //move_x -= player_stats.player_acc;
        //if(move_x &lt; 0) move_x = 0;
        move_x = 0;
    }
}
if(x_axis == -1) {    
    if(move_x &gt; 0)
    {
        //move_x += player_stats.player_acc;
        //if(move_x &gt; 0) move_x = 0;
        move_x = 0;
    }
}
if(x_axis == 0) {
    move_x = 0;
}

//Y-Achse (+ für rechts und - für links)
y_axis = -admin.up_key + admin.down_key;
//Keine Taste wird gedrückt: Achse bekommt Vorzeichen des vorherigen move_x
if(!admin.up_key &amp;&amp; !admin.down_key) y_axis = sign(move_y);
//move = vorzeichen der achse multipliziert mit dem Startspeed
if(move_y == 0) {
    if(admin.up_key || admin.down_key) {
        move_y = y_axis * player_stats.player_speed;
    }
}

//Beschleunigung
if(admin.down_key) { 
    move_y += player_stats.player_acc * y_axis;
}
if(admin.up_key) { 
    move_y += player_stats.player_acc * y_axis;
}
//Friciton
if(!admin.up_key &amp;&amp; !admin.down_key) {
    move_y -= player_stats.player_friction * y_axis;
    if(sign(move_y) == -1 &amp;&amp; y_axis == 1) move_y = 0;
    if(sign(move_y) == 1 &amp;&amp; y_axis == -1) move_y = 0;
}
//Maxspeed
if(y_axis == 1) {    
    if(move_y &gt; player_stats.max_player_speed)
    {
        move_y = player_stats.max_player_speed;
    }
}
if(y_axis == -1) {    
    if(move_y &lt; -player_stats.max_player_speed)
    {
        move_y = -player_stats.max_player_speed;
    }
}
//Minspeed
if(y_axis == 1) {    
    if(move_y &lt; 0)
    {
        move_y -= player_stats.player_acc;
        if(move_y &lt; 0) move_y = 0;
    }
}
if(y_axis == -1) {    
    if(move_y &gt; 0)
    {
        move_y += player_stats.player_acc;
        if(move_y &gt; 0) move_y = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Angriff
//Angriffsrichtung
if(admin.right_key)
{
    attack_axis = 1;
}
if(admin.left_key)
{
    attack_axis = -1;
}
if(admin.left_key &amp;&amp; admin.right_key) {
    if(move_x != 0) {
        attack_axis = sign(move_x);
    } else attack_axis = image_xscale;
}
x_axis_old = attack_axis;

//Y-Axis
if(admin.down_key)
{
    y_axis_old = 1;
}
if(admin.up_key)
{
    y_axis_old = -1;
}
if(admin.down_key &amp;&amp; admin.up_key) {
    y_axis_old = sign(move_y);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kollision mit Hindernissen
/*
if(place_meeting(x,y + move_y,obj_hindernis))
{
    while(!place_meeting(x,y + y_axis,obj_hindernis))
    {
        y += y_axis;
    }
    move_y = 0;
}

if(place_meeting(x,y + move_y,obj_hindernis))
{
    while(!place_meeting(x,y + 1,obj_hindernis))
    {
        y += 1;
    }
    move_y = 0;
}

if(place_meeting(x + move_x,y,obj_hindernis))
{
    while(!place_meeting(x + x_axis,y,obj_hindernis))
    {
        x += x_axis;
    }
    move_x = 0;
}

if(place_meeting(x + move_x,y,obj_hindernis))
{
    while(!place_meeting(x + 1,y,obj_hindernis))
    {
        x += 1;
    }
    move_x = 0;
}
*/
mask_index = collision_mask;
if(!admin.is_ghost) {
if(place_meeting(x + move_x, y, obj_hindernis))
{
    while(!place_meeting(x + sign(move_x),y,obj_hindernis))
    {
        x += sign(move_x);
    }
    move_x = 0;
}

//Vertikal
if(place_meeting(x, y + move_y, obj_hindernis))
{
    while(!place_meeting(x,y+sign(move_y),obj_hindernis))
    {
        y += sign(move_y);
    }
    move_y = 0;
}

//Schräg 1
if(place_meeting(x + move_x, y + move_y, obj_hindernis))
{
    if(!place_meeting(x + sign(move_x),y,obj_hindernis))
    {
        x += sign(move_x);
    }
    move_x = 0;
}
}
//mask_index = battle_mask;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Addiere Move-Variablen
x += move_x;
y += move_y;

//Stats
stats.pxl_travelled += round(sqrt(sqr(move_x) + sqr(move_y)));

if(!obj_player.isSprinting &amp;&amp; !obj_player.is_crouching) {
    stats.pxl_walked += round(sqrt(sqr(move_x) + sqr(move_y)));
}

if(obj_player.isSprinting) {
    stats.pxl_sprinted += round(sqrt(sqr(move_x) + sqr(move_y)));
}

if(obj_player.is_crouching) {
    stats.pxl_crouched += round(sqrt(sqr(move_x) + sqr(move_y)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bewegung über Rand verhindern

x = min(x, room_width - spr_width);
x = max(x, spr_width);

y = min(y, room_height - spr_height);
y = max(y, spr_height);

//Test
//move_wrap(true, false, sprite_width*image_xscale);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crouching
is_crouching = false;
if(admin.crouch_key) {
    is_crouching = true;
    isSprinting = false;
}

if(is_crouching) {
    //Speed
    player_stats.player_acc = player_stats.player_crouch_acc;
    player_stats.max_player_speed = player_stats.max_player_crouch_speed;
    //Sprite
    sprite_front = spr_charakter_crouch;
}

if(admin.crouch_key_released || (!is_crouching &amp;&amp; admin.game_paused)) {
    sprite_front = sprite_front_old;
    sprite_back = sprite_back_old;
    player_stats.player_acc = player_stats.old_player_acc;
    player_stats.max_player_speed = player_stats.old_max_player_speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprinten

isSprinting = false;
if(admin.sprint_key &amp;&amp; player_stats.stamina &gt; 0 &amp;&amp; !is_crouching) {
    if(move_x != 0 || move_y != 0) {
        isSprinting = true;
    }
}

if(isSprinting) {
    player_stats.player_acc = player_stats.player_sprint_acc;
    player_stats.max_player_speed = player_stats.max_player_sprint_speed;
}

if(admin.sprint_key_released) {
    player_stats.player_acc = player_stats.old_player_acc;
    player_stats.max_player_speed = player_stats.old_max_player_speed;
}

//Stamina
if(isSprinting) {
    if(player_stats.stamina &gt; 0) {
        player_stats.stamina -= player_stats.stamina_usage;
    }
    if(player_stats.stamina &lt; 0) player_stats.stamina = 0;
}
else {
    player_stats.stamina += player_stats.stamina_reg;
    if(player_stats.stamina &gt; player_stats.max_stamina) player_stats.stamina = player_stats.max_stamina;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regeneration
if(alarm_get(0) == -1) {
    scr_player_heal(player_stats.regeneration);
    alarm_set(0, player_stats.reg_time);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mana Regeneration
if(alarm_get(1) == -1) {
    scr_player_add_mana(player_stats.mana_reg);
    alarm_set(1, player_stats.mana_reg_time);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dealt-damage + heal
//damage
if(dealt_damage &gt; 0) {
    if(damage_count &gt; 10) {
        if(old_dealt_damage == dealt_damage) {
            scr_draw_dealt_damage(x, y - sprite_get_height(sprite_index)/2 - 30, dealt_damage);
            dealt_damage = 0;
        }
        damage_count = 0;
    }
    if(dealt_damage &gt;= 10) {
        scr_draw_dealt_damage(x, y - sprite_get_height(sprite_index)/2 - 30, dealt_damage);
        dealt_damage = 0;
    }
    damage_count++;
}

//heal
if(dealt_heal &gt; 0) {
    if(heal_count &gt; 10) {
        if(old_dealt_heal == dealt_heal) {
            scr_draw_dealt_heal(x, y - sprite_get_height(sprite_index)/2 - 30, dealt_heal);
            dealt_heal = 0;
        }
        heal_count = 0;
    }
    if(dealt_heal &gt;= 10) {
        scr_draw_dealt_heal(x, y - sprite_get_height(sprite_index)/2 - 30, dealt_heal);
        dealt_heal = 0;
    }
    heal_count++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set depth
scr_set_depth();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite-Ausrichtung
switch (x_axis) {
    case 1: 
        image_xscale = 1;
        break;
    case -1:
        image_xscale = -1;
        break;
    case 0:
        image_xscale = x_axis_old;
}


sprite_index = sprite_front;

if(player_stats.invisible) {
    image_alpha = 0.5;
} else {
    image_alpha = 1;
}
//Vorder + Hinterseite
/*
switch (y_axis) {
    case 1: 
        sprite_index = sprite_front;
        break;
    case -1:
        sprite_index = sprite_back;
        break;
    case 0:
        switch (y_axis_old) {
            case 1:
                sprite_index = sprite_front;
                break;
            case -1:
                sprite_index = sprite_back;
        }
}
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tod
if(player_stats.hp &lt;= 0)
{
    scr_player_death();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rauch
var smoke_colour = choose(c_dkgray, c_gray);
if(isSprinting) smoke_colour = c_black; 
if(alarm_get(2) == -1) {
if(move_x != 0 || move_y != 0) {
    effect_create_below(ef_smoke, x, y - 5, 0, smoke_colour);
    alarm_set(2, irandom(15) + 1);
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self
draw_self();
//draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, scr_get_random_colour(), image_alpha);

if(admin.show_hitbox) scr_draw_hitbox();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
