<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ende eines Raums
portal_active = false;
no_enemies = false;

run_room_index = 0;
run_level_index = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate Map
max_rooms_per_level = 12;

//Counts
forest_room_count = 2;
swamp_room_count = 2;
ruins_room_count = 2;
dungeon_room_count = 2;
cave_room_count = 2;
hell_room_count = 2;

//Global Map
for(var i = 0; i &lt; 5; i++) {
for(var j = 0; j &lt; max_rooms_per_level+1; j++) {
    map[i, j] = -1;
}
}

//Forest
var level_index = 0;
for(var i = 0; i &lt; max_rooms_per_level; i++) {
    do {
        var room_index = irandom_range(1, forest_room_count);
        map[level_index, i] = asset_get_index("rm_run_forest" + string(room_index));
    } until (i == 0 || map[level_index, i] != map[level_index, i-1]);
}
var boss_room_index = irandom_range(1, 2);
map[level_index, max_rooms_per_level] = asset_get_index("rm_run_forest_boss" + string(boss_room_index));

//Swamp
var level_index = 1;
for(var i = 0; i &lt; max_rooms_per_level; i++) {
    do {
        var room_index = irandom_range(1, swamp_room_count);;
        map[level_index, i] = asset_get_index("rm_run_swamp" + string(room_index));
    } until (i == 0 || map[level_index, i] != map[level_index, i-1]);
}
var boss_room_index = irandom_range(1, 2);
map[level_index, max_rooms_per_level] = asset_get_index("rm_run_swamp_boss" + string(boss_room_index));

//Ruins
var level_index = 2;
for(var i = 0; i &lt; max_rooms_per_level; i++) {
    do {
        var room_index = irandom_range(1, ruins_room_count);;
        map[level_index, i] = asset_get_index("rm_run_ruins" + string(room_index));
    } until (i == 0 || map[level_index, i] != map[level_index, i-1]);
}
var boss_room_index = irandom_range(1, 2);
map[level_index, max_rooms_per_level] = asset_get_index("rm_run_ruins_boss" + string(boss_room_index));

//Dungeon
var level_index = 3;
for(var i = 0; i &lt; max_rooms_per_level; i++) {
    do {
        var room_index = irandom_range(1, dungeon_room_count);;
        map[level_index, i] = asset_get_index("rm_run_dungeon" + string(room_index));
    } until (i == 0 || map[level_index, i] != map[level_index, i-1]);
}
var boss_room_index = irandom_range(1, 2);
map[level_index, max_rooms_per_level] = asset_get_index("rm_run_dungeon_boss" + string(boss_room_index));

//Cave
var level_index = 4;
for(var i = 0; i &lt; max_rooms_per_level; i++) {
    do {
        var room_index = irandom_range(1, cave_room_count);;
        map[level_index, i] = asset_get_index("rm_run_cave" + string(room_index));
    } until (i == 0 || map[level_index, i] != map[level_index, i-1]);
}
var boss_room_index = irandom_range(1, 2);
map[level_index, max_rooms_per_level] = asset_get_index("rm_run_cave_boss" + string(boss_room_index));

//Hell
var level_index = 5;
for(var i = 0; i &lt; max_rooms_per_level; i++) {
    do {
        var room_index = irandom_range(1, hell_room_count);;
        map[level_index, i] = asset_get_index("rm_run_hell" + string(room_index));
    } until (i == 0 || map[level_index, i] != map[level_index, i-1]);
}
var boss_room_index = irandom_range(1, 2);
map[level_index, max_rooms_per_level] = asset_get_index("rm_run_hell_boss" + string(boss_room_index));

//End
var level_index = 6;
map[level_index, 0] = rm_run_end;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keine Gegner mehr
if(!admin.in_run) exit;

enemies_exist = false;

if(instance_exists(obj_gegner)) {
with(obj_gegner) {
    if(triggerable) {
        other.enemies_exist = true;
    }
}
}

enemies_exist = false;

if(!enemies_exist &amp;&amp; !portal_active) {
    portal_active = true;
    if(scr_crit_attack(player_stats.chest_chance) &amp;&amp; instance_exists(obj_chest_placeholder)) {
        instance_create(obj_chest_placeholder.x, obj_chest_placeholder.y, obj_random_type_chest);
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Portal Active (DEBUG)
if(admin.show_hitbox) {
draw_set_alpha(1);
draw_set_colour(c_white);
draw_set_font(fnt_fps);
draw_text(display_get_gui_width() - 600, 16, "Portal: " + string(portal_active));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
