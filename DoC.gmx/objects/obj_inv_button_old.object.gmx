<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variablen
inventory_type = 0;
slot = -1;

button_item = -1;
button_count = 0;

width = 0;

item_sprite_number = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drag &amp; Drop System
button_item = inventory_type.inv[slot];
button_count = inventory_type.count[slot];
var click = admin.left_click_pressed;
var right_click = admin.right_click_pressed;
var shift = admin.shift_key;
width = sprite_get_width(spr_inv_border)/2;

draw_set_colour(c_white);
draw_set_alpha(1);

if(abs(mouse_ind.x - x) &lt; width &amp;&amp; (abs(mouse_ind.y - y) &lt; width)) {
    //Item-Stats
    if(button_item != -1) {
        if(mouse_ind.mouse_item == -1) {
            inventory.item_stats_title = item[button_item, 0];
            inventory.item_stats_desc = item[button_item, 1];
            scr_draw_item_stats(button_item);
        }
    }
    //Rechteck bei Hovern
    draw_set_alpha(0.5);
    draw_rectangle(
        x - (width-2),
        y - (width-2),
        x + (width-2),
        y + (width-2),
        0
    );
    draw_set_alpha(1);
    if(click &amp;&amp; !right_click &amp;&amp; !shift) {
        //Wenn der Button ein Item enthält
        if(button_item != -1) {
            if(scr_check_item_inv_type(inventory_type, mouse_ind.mouse_item)) {
                scr_inventory_rem_item_slot(inventory_type, slot);
            }
        }
        //Wenn die Maus ein Item enthält
        if(mouse_ind.mouse_item != -1) {
            var old_mouse_item = mouse_ind.mouse_item;
            if(scr_check_item_inv_type(inventory_type, mouse_ind.mouse_item)) {
                var success = scr_inventory_add_item_slot_empty(
                    inventory_type,
                    mouse_ind.mouse_item,
                    mouse_ind.mouse_count,
                    slot,
                    button_item,
                    button_count
                    );
                
                if(is_string(success)) {
                    if(int64(success) &gt; 0) {
                        mouse_ind.mouse_count = int64(success);
                    }
                } else if(success == true) {
                    mouse_ind.mouse_item = -1;
                    mouse_ind.mouse_count = 0;
                    if(old_mouse_item == button_item) {
                        button_item = -1;
                        button_count = 0;
                    }
                }
            }
        }
        if(scr_check_item_inv_type(inventory_type, mouse_ind.mouse_item)) {
            if(mouse_ind.mouse_item != button_item) {
                mouse_ind.mouse_item = button_item;
                mouse_ind.mouse_count = button_count;
            }
        }
    }
    //Shift + Linksklick
    if(click &amp;&amp; !right_click &amp;&amp; shift) {
        if(button_item != -1) {
            var success = scr_inventory_add_item_auto(button_item, button_count);
            if(success) {
                inventory_type.inv[slot] = -1;
                inventory_type.count[slot] = 0;
            } else if(is_string(success)) {
                button_count = int64(success);
            }
        }
    }
    //Rechtsklick
    if(right_click &amp;&amp; !click &amp;&amp; !shift) {
        if(mouse_ind.mouse_item == -1 &amp;&amp; button_item != -1 &amp;&amp; button_count != 1) {
            var button_divide = button_count/2;
            var mouse_divide;
            if((button_divide*2 mod 2) != 0) {
                button_divide -= 0.5;
                mouse_divide = button_divide + 1;
                show_debug_message(string(button_divide) + string(mouse_divide));
            } else {
                mouse_divide = button_divide;
            }
            scr_inventory_rem_item_slot_count(inventory_type, slot, button_count - button_divide);
            mouse_ind.mouse_item = button_item;
            mouse_ind.mouse_count = mouse_divide;
        } else if(mouse_ind.mouse_count &gt; 0) {
            if(scr_check_item_inv_type(inventory_type, mouse_ind.mouse_item)) {
                if(button_count == 0 || mouse_ind.mouse_item == button_item) {
                    var success = scr_inventory_add_item_slot(inventory_type, mouse_ind.mouse_item, 1, slot);
                    if(is_string(success)) mouse_ind.mouse_count += int64(success);
                    mouse_ind.mouse_count -= 1;
                }
            }
        }
    }
}

draw_sprite(spr_inv_border_2, 0, x, y);
draw_sprite(spr_inv_border, 0, x, y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite + Anzahl

if(inventory_type.inv[slot] != -1) {
    draw_sprite(scr_get_item_sprite(inventory_type.inv[slot]), item_sprite_number, x, y);
    item_sprite_number++;
    if(item_sprite_number &gt; sprite_get_number(scr_get_item_sprite(inventory_type.inv[slot]))-1) {
        item_sprite_number = 0;
    };
}

//Anzahl der Item in den Slots
scr_draw_count(inventory_type.count[slot], x, y);

if(!scr_check_item_inv_type(inventory_type, mouse_ind.mouse_item)) {
    draw_sprite(spr_exit, 0, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
