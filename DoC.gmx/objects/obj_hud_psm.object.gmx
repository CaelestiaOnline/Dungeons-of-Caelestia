<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Koordinaten
//Hintergrund
hud_bg_x1 = display_get_gui_width()/2;
hud_bg_x2 = display_get_gui_width()/2;
hud_bg_y1 = display_get_gui_height() - 0;
hud_bg_y2 = display_get_gui_height() + 10;

hud_circle_bg_x = (hud_bg_x1 + hud_bg_x2)/2;
hud_circle_bg_y = (hud_bg_y1 + hud_bg_y2)/2;

steps = 4;
radius = 180;
slots_radius = 100;

slots_bg_radius = 32;

buffer = 6;

y_buffer = 42;

line_width = 8;

//Slots
slots_x[0] = 0;
slots_x[1] = 0;
slots_x[2] = 0;

slots_y[0] = 0;
slots_y[1] = 0;
slots_y[2] = 0;

slots_angle[0] = 180*3/3;
slots_angle[1] = 180*1.5/3;
slots_angle[2] = 180*0/3;

//Ecken
point_radius[0] = radius;
point_radius[1] = radius * 1.1;
point_radius[2] = radius * 1.1;
point_radius[3] = radius;

point_angle[0] = 180*4/steps;
point_angle[1] = 180*2.5/steps;
point_angle[2] = 180*1.5/steps;
point_angle[3] = 180*0/steps;

point_x[0] = 0;
point_x[1] = 0;
point_x[2] = 0;
point_x[3] = 0;

point_y[0] = 0;
point_y[1] = 0;
point_y[2] = 0;
point_y[3] = 0;

//Farben
colour_circle_bg = global.co_blue_gray_800; 
colour_font = c_white;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///exit
if(!admin.playing) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hintergrund
var hud_bg_y = hud_circle_bg_y - buffer;

for(var i = 0; i &lt; steps; i += 1) {
    point_x[i] = hud_circle_bg_x + lengthdir_x(point_radius[i], point_angle[i]);
    point_y[i] = hud_bg_y + lengthdir_y(point_radius[i], point_angle[i]);
    
    point_x_bg[i] = hud_circle_bg_x + lengthdir_x(point_radius[i] + buffer, point_angle[i]);
    point_y_bg[i] = hud_bg_y + lengthdir_y(point_radius[i] + buffer, point_angle[i]);
}

//Hintergrund 2
draw_set_colour(inv_hud.colour_trans);
draw_set_alpha(inv_hud.alpha_bbg);

draw_primitive_begin(pr_trianglefan);
draw_vertex(hud_circle_bg_x, hud_bg_y);
for(i = 0; i &lt; steps; i += 1) {
    draw_vertex(point_x_bg[i], point_y_bg[i]);
}
draw_primitive_end();


//Hintergrund
draw_set_colour(global.co_blue_gray_900);
draw_set_alpha(inv_hud.alpha_bbg);

draw_primitive_begin(pr_trianglefan);
draw_vertex(hud_circle_bg_x, hud_circle_bg_y);
for(i = 0; i &lt; steps; i += 1) {
    draw_vertex(point_x[i], point_y[i]);
}
draw_primitive_end();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Linien
//Linien
draw_set_alpha(0.8);
draw_set_colour(colour_circle_bg);

draw_line_width(slots_x[0], slots_y[0], slots_x[1], slots_y[1], line_width);
draw_line_width(slots_x[1], slots_y[1], slots_x[2], slots_y[2], line_width);
draw_line_width(slots_x[0], slots_y[0], slots_x[2], slots_y[2], line_width);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slots
for (var i = 0; i &lt; array_length_1d(slots_x); i++) {
    slots_x[i] = hud_circle_bg_x + lengthdir_x(slots_radius, slots_angle[i]);
    slots_y[i] = hud_circle_bg_y - y_buffer + lengthdir_y(slots_radius, slots_angle[i]);
};

//Hintergrund
for (var i = 0; i &lt; array_length_1d(slots_x); i++) {

var inventory_type = 0;
if(i == 0) inventory_type = inventory.inv_sec;
if(i == 1) inventory_type = inventory.inv_prim;
if(i == 2) inventory_type = inventory.inv_mag;

draw_set_colour(colour_circle_bg);
draw_set_alpha(inv_hud.alpha_bbg);
draw_circle(slots_x[i], slots_y[i], slots_bg_radius, 0);
draw_set_alpha(1);

if(i == 0) {
    if(instance_exists(inventory.inv_sec.real_item_object[0])) {
        var countdown;
        countdown = inventory.inv_sec.real_item_object[0].alarm[0] / item_stats[inventory.inv_sec.inv[0], item_stats_sec.cooldown];
        var countdown_alpha = countdown;
        countdown = clamp(countdown, 0, 1);
        
        draw_set_colour(c_white);
        draw_set_alpha(countdown_alpha);
        draw_circle(slots_x[i], slots_y[i], (slots_bg_radius - buffer), 0);
        draw_set_alpha(1);
    }

} else {
    var countdown;
    countdown = player_stats.alarm[1] / player_stats.attack_speed;
    var countdown_alpha = countdown;
    countdown = clamp(countdown, 0, 1);
    
    draw_set_colour(c_white);
    draw_set_alpha(countdown_alpha);
    draw_circle(slots_x[i], slots_y[i], (slots_bg_radius - buffer), 0);
    draw_set_alpha(1);
}


if(inventory_type.inv[0] != -1) {
    draw_sprite(spr_items, inventory_type.inv[0], slots_x[i], slots_y[i]);
}
scr_draw_count(inventory_type.count[0], slots_x[i], slots_y[i]);

var width = sprite_get_width(spr_inv_border)/2;

draw_set_alpha(0.8);
draw_set_colour(colour_circle_bg);
draw_circle(
    slots_x[i] + width,
    slots_y[i] + width,
    10,
    0
    );
draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_colour(c_white);
draw_set_font(fnt_hud);
draw_text(
    slots_x[i] + width,
    slots_y[i] + width,
    string(i+1)
    );
draw_set_halign(fa_left);
draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
