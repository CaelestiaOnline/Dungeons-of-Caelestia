<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats
goal_object = 0;

var middle_x = display_get_gui_width()/2;
var middle_y = display_get_gui_height()/2;

var middle_dir = point_direction(0, 0, middle_x, middle_y);

final_angle1 = choose(290, 300, 310);
final_angle2 = choose(10, 20, 30);

box_x = -1000;
box_y = -1000;

point_x1 = 0;
point_y1 = 0;

point_angle1 = 260;

point_x2 = -1000;
point_y2 = -1000;

point_angle2 = 100;

point_alpha = 0;

phase2 = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotation

var line_length = 500;
var rotation_speed = 2;

var end_angle = 180;

//Punkt 2
point_x2 = lengthdir_x(line_length, point_angle1);
point_y2 = lengthdir_y(line_length, point_angle1);

//Endpunkt
box_x = point_x2 + lengthdir_x(line_length, point_angle2);
box_y = point_y2 + lengthdir_y(line_length, point_angle2);


if((final_angle1 - point_angle1) &gt; 0) {
    point_angle1 += rotation_speed;
} else if((final_angle1 - point_angle1) &lt; 0) point_angle1 -= rotation_speed;

if((final_angle2 - point_angle2) &gt; 0) {
    point_angle2 += rotation_speed;
} else if((final_angle2 - point_angle2) &lt; 0) point_angle2 -= rotation_speed;

if(phase2) {
    final_angle1 = 180;
    final_angle2 = 180;
}

if(point_angle1 == end_angle &amp;&amp; point_angle2 == end_angle &amp;&amp; phase2) {
    instance_destroy();
    scr_keylock_abilities(false);
    with(goal_object) instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
var point_radius = 32;
var line_width = 32;

if(point_alpha &lt; 1 &amp;&amp; !phase2) point_alpha += 0.02;

if(point_alpha &gt; 0 &amp;&amp; phase2) point_alpha -= 0.02;

draw_set_colour(global.co_blue_gray_800);
draw_set_alpha(point_alpha);

//Axis1
draw_line_width(point_x1, point_y1, point_x2, point_y2, line_width);

//Point Axis1
draw_circle(point_x1, point_y1, line_width/2, 0);

//Axis2
draw_line_width(point_x2, point_y2, box_x, box_y, line_width);

//Point Axis2
draw_circle(point_x2, point_y2, line_width/2, 0);

draw_set_colour(global.co_blue_gray_900);
//Point1
draw_circle(point_x1, point_y1, point_radius, 0);

//Point2
draw_circle(point_x2, point_y2, point_radius, 0);

//Endpunkt
draw_circle(box_x, box_y, line_width/2, 0);

draw_set_alpha(1);




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Object
goal_object.x = box_x;
goal_object.y = box_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
