<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Koordinaten
//Hintergrund
hud_bg_x1 = 0;
hud_bg_x2 = 300;
hud_bg_y1 = display_get_gui_height() - 300;
hud_bg_y2 = display_get_gui_height() - 0;

hud_circle_bg_x = (hud_bg_x1 + hud_bg_x2)/2;
hud_circle_bg_y = (hud_bg_y1 + hud_bg_y2)/2;

radius_bg = 140;

//Bars
//Health
health_bar_x = 0;
health_bar_y = 0;
health_bar_angle = 360/5 * 0;

//Mana
mana_bar_x = 0;
mana_bar_y = 0;
mana_bar_angle = 360/5 * 1;

//Stamina
stamina_bar_x = 0;
stamina_bar_y = 0;
stamina_bar_angle = 360/5 * 2;

//Xp
xp_bar_x = 0;
xp_bar_y = 0;
xp_bar_angle = 360/5 * 3;

//Money
money_bar_x = 0;
money_bar_y = 0;
money_bar_angle = 360/5 * 4;
money_scale = 0;

orbit_speed = 0.1;

bar_buffer = 85;
line_buffer = 110;

radius = 20;

inner_radius = 16;

buffer = 4;

line_width = 6;

circle_radius = 15;

//Linien
line_angle[0] = 360/5 * 0 + 360/10;
line_angle[1] = 360/5 * 1 + 360/10;
line_angle[2] = 360/5 * 2 + 360/10;
line_angle[3] = 360/5 * 3 + 360/10;
line_angle[4] = 360/5 * 4 + 360/10;

line_x[0] = 0;
line_x[1] = 0;
line_x[2] = 0;
line_x[3] = 0;
line_x[4] = 0;

line_y[0] = 0;
line_y[1] = 0;
line_y[2] = 0;
line_y[3] = 0;
line_y[4] = 0;


//Farben
colour_circle_bg = global.co_blue_gray_800; 
colour_font = c_white;

colour_health = make_colour_rgb(213, 0, 0);
colour_mana = make_colour_rgb(24, 255, 255);
colour_stamina = make_colour_rgb(26, 35, 126);
colour_xp = make_colour_rgb(24, 145, 31);
colour_money = make_colour_rgb(255, 193, 7);

//Dealt-damage
dealt_damage_scale = 0;
old_hp = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Koordinaten Pickups
//Hintergrund
hud_pickups_bg_x1 = display_get_gui_width() - 150 - 50;
hud_pickups_bg_x2 = display_get_gui_width() - 50;
hud_pickups_bg_y1 = display_get_gui_height() - 150 - 50;
hud_pickups_bg_y2 = display_get_gui_height() - 50;

hud_pickups_bg_x = (hud_pickups_bg_x1 + hud_pickups_bg_x2)/2;
hud_pickups_bg_y = (hud_pickups_bg_y1 + hud_pickups_bg_y2)/2;

pickups_radius_bg = 128;

//Bars
slots_x[0] = 0;
slots_x[1] = 0;
slots_x[2] = 0;
slots_x[3] = 0;

slots_y[0] = 0;
slots_y[1] = 0;
slots_y[2] = 0;
slots_y[3] = 0;

slots_angle[0] = 0;
slots_angle[1] = 90;
slots_angle[2] = 180;
slots_angle[3] = 270;

pickups_orbit_speed = 6;

real_orbit_speed = 0;

pickups_bar_buffer = 72;

pickups_radius = 32;

number_buffer = 32;

numbers_x[0] = 0;
numbers_x[1] = 0;
numbers_x[2] = 0;
numbers_x[3] = 0;

numbers_y[0] = 0;
numbers_y[1] = 0;
numbers_y[2] = 0;
numbers_y[3] = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drehung

//Health
health_bar_x = lengthdir_x(bar_buffer, health_bar_angle) + hud_circle_bg_x;
health_bar_y = lengthdir_y(bar_buffer, health_bar_angle) + hud_circle_bg_y;
if(health_bar_angle &gt; 360) health_bar_angle -= 360;
health_bar_angle += orbit_speed;

//Mana
mana_bar_x = lengthdir_x(bar_buffer, mana_bar_angle) + hud_circle_bg_x;
mana_bar_y = lengthdir_y(bar_buffer, mana_bar_angle) + hud_circle_bg_y;
if(mana_bar_angle &gt; 360) mana_bar_angle -= 360;
mana_bar_angle += orbit_speed;

//Stamina
stamina_bar_x = lengthdir_x(bar_buffer, stamina_bar_angle) + hud_circle_bg_x;
stamina_bar_y = lengthdir_y(bar_buffer, stamina_bar_angle) + hud_circle_bg_y;
if(stamina_bar_angle &gt; 360) stamina_bar_angle -= 360;
stamina_bar_angle += orbit_speed;

//XP
xp_bar_x = lengthdir_x(bar_buffer, xp_bar_angle) + hud_circle_bg_x;
xp_bar_y = lengthdir_y(bar_buffer, xp_bar_angle) + hud_circle_bg_y;
if(xp_bar_angle &gt; 360) xp_bar_angle -= 360;
xp_bar_angle += orbit_speed;

//Geld
money_bar_x = lengthdir_x(bar_buffer, money_bar_angle) + hud_circle_bg_x;
money_bar_y = lengthdir_y(bar_buffer, money_bar_angle) + hud_circle_bg_y;
if(money_bar_angle &gt; 360) money_bar_angle -= 360;
money_bar_angle += orbit_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Liniendrehung

for(var i = 0; i &lt; array_length_1d(line_angle); i++) {
    line_x[i] = lengthdir_x(line_buffer, line_angle[i]) + hud_circle_bg_x;
    line_y[i] = lengthdir_y(line_buffer, line_angle[i]) + hud_circle_bg_y;
    if(line_angle[i] &gt; 360) line_angle[i] -= 360;
    line_angle[i] += orbit_speed;  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drehung Pickups
real_orbit_speed = 0;
if(slots_angle[inventory.menupos] &gt; 0 &amp;&amp; slots_angle[inventory.menupos] &lt; 180) real_orbit_speed = -pickups_orbit_speed;
else if(slots_angle[inventory.menupos] &gt;= 180 &amp;&amp; slots_angle[inventory.menupos] &lt; 360) real_orbit_speed = pickups_orbit_speed;
else real_orbit_speed = 0;

for(var i = 0; i &lt; array_length_1d(slots_angle); i++) {
    slots_x[i] = lengthdir_x(pickups_bar_buffer, slots_angle[i] + 90) + hud_pickups_bg_x;
    slots_y[i] = lengthdir_y(pickups_bar_buffer, slots_angle[i] + 90) + hud_pickups_bg_y;
    numbers_x[i] = lengthdir_x(number_buffer, slots_angle[i] + 90) + hud_pickups_bg_x;
    numbers_y[i] = lengthdir_y(number_buffer, slots_angle[i] + 90) + hud_pickups_bg_y;
    if(sign(real_orbit_speed) == -1) {
        if(slots_angle[i] &lt; 0) slots_angle[i] += 360;
    } 
    if(sign(real_orbit_speed) == 1) {
        if(slots_angle[i] &gt; 360) slots_angle[i] -= 360;
    }
    //slots_angle[i] += orbit_speed;
}

if(slots_angle[inventory.menupos] != 0) {
    for(var i = 0; i &lt; array_length_1d(slots_angle); i++) {
        slots_angle[i] += real_orbit_speed;
    }
}


/*
var pos = inventory.menupos;

slots_angle[pos] = 90;

if((pos+1) &gt; 3) pos -= 3; 
else pos++;
slots_angle[pos] = 180;

if((pos+1) &gt; 3) pos -= 3; 
else pos++;
slots_angle[pos] = 270;

if((pos+1) &gt; 3) pos -= 3; 
else pos++;
slots_angle[pos] = 0;  
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///exit
if(!admin.playing) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hintergrund
draw_set_colour(inv_hud.colour_trans);
draw_set_alpha(inv_hud.alpha_bbg);

draw_circle(
    hud_circle_bg_x,
    hud_circle_bg_y,
    radius_bg,
    0
    );
    
draw_set_colour(global.co_blue_gray_900);
draw_set_alpha(inv_hud.alpha_bbg);

draw_circle(
    hud_circle_bg_x,
    hud_circle_bg_y,
    radius_bg - buffer,
    0
    );
    
draw_set_alpha(1);
draw_set_colour(c_white);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Linien


draw_set_alpha(0.8);
draw_set_colour(colour_circle_bg);

draw_line_width(line_x[0], line_y[0], line_x[2], line_y[2], line_width);
draw_line_width(line_x[0], line_y[0], line_x[3], line_y[3], line_width);
draw_line_width(line_x[1], line_y[1], line_x[3], line_y[3], line_width);
draw_line_width(line_x[1], line_y[1], line_x[4], line_y[4], line_width);
draw_line_width(line_x[2], line_y[2], line_x[4], line_y[4], line_width);


draw_line_width(line_x[0], line_y[0], line_x[1], line_y[1], line_width);
draw_line_width(line_x[1], line_y[1], line_x[2], line_y[2], line_width);
draw_line_width(line_x[2], line_y[2], line_x[3], line_y[3], line_width);
draw_line_width(line_x[3], line_y[3], line_x[4], line_y[4], line_width);
draw_line_width(line_x[0], line_y[0], line_x[4], line_y[4], line_width);

draw_set_colour(c_black);
draw_line_width(line_x[1], line_y[1], health_bar_x, health_bar_y, line_width);
draw_line_width(line_x[2], line_y[2], mana_bar_x, mana_bar_y, line_width);
draw_line_width(line_x[3], line_y[3], stamina_bar_x, stamina_bar_y, line_width);
draw_line_width(line_x[4], line_y[4], xp_bar_x, xp_bar_y, line_width);
draw_line_width(line_x[0], line_y[0], money_bar_x, money_bar_y, line_width);

draw_set_colour(colour_health);
draw_line_width(line_x[4], line_y[4], health_bar_x, health_bar_y, line_width);
draw_set_colour(colour_mana);
draw_line_width(line_x[0], line_y[0], mana_bar_x, mana_bar_y, line_width);
draw_set_colour(colour_stamina);
draw_line_width(line_x[1], line_y[1], stamina_bar_x, stamina_bar_y, line_width);
draw_set_colour(colour_xp);
draw_line_width(line_x[2], line_y[2], xp_bar_x, xp_bar_y, line_width);
draw_set_colour(colour_money);
draw_line_width(line_x[3], line_y[3], money_bar_x, money_bar_y, line_width);

draw_set_colour(colour_circle_bg);
draw_set_alpha(1);

draw_circle(line_x[0], line_y[0], circle_radius, 0);
draw_circle(line_x[1], line_y[1], circle_radius, 0);
draw_circle(line_x[2], line_y[2], circle_radius, 0);
draw_circle(line_x[3], line_y[3], circle_radius, 0);
draw_circle(line_x[4], line_y[4], circle_radius, 0);

draw_set_colour(c_white);
draw_set_font(fnt_hud);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(line_x[0], line_y[0], "MA");
draw_text(line_x[1], line_y[1], "ST");
draw_text(line_x[2], line_y[2], "XP");
draw_text(line_x[3], line_y[3], "$");
draw_text(line_x[4], line_y[4], "HP");

draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Überschrift
/*
draw_set_colour(inv_hud.colour_heading);
draw_set_valign(fa_middle);
draw_rectangle(
    hud_bg_x1,
    hud_bg_y1 - 8 - 32,
    hud_bg_x2,
    hud_bg_y1 - 8,
    0
);

draw_set_colour(inv_hud.colour_font);
draw_set_font(fnt_inv_heading);
draw_text(
    hud_bg_x1 + 8,
    hud_bg_y1 - 8 - 16,
    "HUD"
);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Charakter
draw_sprite_ext(
    spr_charakter,
    0,
    hud_circle_bg_x,
    hud_circle_bg_y,
    0.5,
    0.5,
    0,
    c_white,
    1
    );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP des Charakters
//Health-Bar
var health_scale;
health_scale = player_stats.hp / player_stats.max_hp;
if(health_scale &lt; 0) health_scale = 0;

//Hintergrund
draw_set_colour(colour_circle_bg);
draw_set_alpha(inv_hud.alpha_bbg);
draw_circle(health_bar_x, health_bar_y, radius + buffer + inner_radius, 0);
draw_set_alpha(1);

//Dealt-Damage Bar
/*
draw_set_colour(c_yellow);
draw_set_alpha(1);
draw_rectangle(bar_x + buffer, health_bar_y + buffer, bar_x + ((width - buffer) * health_scale), health_bar_y + height - buffer, 0);
*/

//Bar
draw_set_colour(colour_health);
draw_set_alpha(1);
draw_circle(health_bar_x, health_bar_y, (radius * health_scale) + inner_radius, 0);

//Text BG
draw_set_colour(colour_circle_bg);
draw_set_alpha(1);
draw_circle(health_bar_x, health_bar_y, inner_radius, 0);

//Health-Text
draw_set_font(fnt_hud);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_set_colour(colour_font);
draw_text(
    health_bar_x,
    health_bar_y,
    string(int64(player_stats.hp))
    );
    
/*
draw_text(
    bar_x + width - string_width(string(player_stats.max_hp)) - 10,
    (health_bar_y + (health_bar_y+height))/2 - buffer,
    string(player_stats.max_hp)
    );
*/
draw_set_valign(fa_top);
draw_set_halign(fa_left);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mana des Charakters
//Mana-Bar
var mana_scale;
mana_scale = player_stats.mana / player_stats.max_mana;
if(mana_scale &lt; 0) mana_scale = 0;

//Hintergrund
draw_set_colour(colour_circle_bg);
draw_set_alpha(inv_hud.alpha_bbg);
draw_circle(mana_bar_x, mana_bar_y, radius + buffer + inner_radius, 0);
draw_set_alpha(1);

//Bar
draw_set_colour(colour_mana);
draw_set_alpha(1);
draw_circle(mana_bar_x, mana_bar_y, (radius * mana_scale) + inner_radius, 0);

//Text BG
draw_set_colour(colour_circle_bg);
draw_set_alpha(1);
draw_circle(mana_bar_x, mana_bar_y, inner_radius, 0);

//Health-Text
draw_set_font(fnt_hud);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_set_colour(colour_font);
draw_text(
    mana_bar_x,
    mana_bar_y,
    string(int64(player_stats.mana))
    );
/*
draw_text(
    bar_x + width - string_width(string(player_stats.max_mana)) - 10,
    (mana_bar_y + (mana_bar_y+height))/2 - buffer,
    string(player_stats.max_mana)
    );
*/  
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stamina des Charakters
//Stamina-Bar
var stamina_scale;
stamina_scale = player_stats.stamina / player_stats.max_stamina;
if(stamina_scale &lt; 0) stamina_scale = 0;

//Hintergrund
draw_set_colour(colour_circle_bg);
draw_set_alpha(inv_hud.alpha_bbg);
draw_circle(stamina_bar_x, stamina_bar_y, radius + buffer + inner_radius, 0);
draw_set_alpha(1);

//Bar
draw_set_colour(colour_stamina);
draw_set_alpha(1);
draw_circle(stamina_bar_x, stamina_bar_y, (radius * stamina_scale) + inner_radius, 0);

//Text BG
draw_set_colour(colour_circle_bg);
draw_set_alpha(1);
draw_circle(stamina_bar_x, stamina_bar_y, inner_radius, 0);

//Health-Text
draw_set_font(fnt_hud);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_set_colour(colour_font);
draw_text(
    stamina_bar_x,
    stamina_bar_y,
    string(int64(player_stats.stamina))
    );
/*
draw_text(
    bar_x + width - string_width(string(player_stats.max_stamina)) - 10,
    (stamina_bar_y + (stamina_bar_y+height))/2 - buffer,
    string(player_stats.max_stamina)
    );
*/  
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///XP des Charakters
//XP-Bar
var xp_scale;
xp_scale = progress.xp / progress.level_up_xp;
xp_scale = clamp(xp_scale, 0, 1);

//Hintergrund
draw_set_colour(colour_circle_bg);
draw_set_alpha(inv_hud.alpha_bbg);
draw_circle(xp_bar_x, xp_bar_y, radius + buffer + inner_radius, 0);
draw_set_alpha(1);

//Bar
draw_set_colour(colour_xp);
draw_set_alpha(1);
draw_circle(xp_bar_x, xp_bar_y, (radius * xp_scale) + inner_radius, 0);

//Text BG
draw_set_colour(colour_circle_bg);
draw_set_alpha(1);
draw_circle(xp_bar_x, xp_bar_y, inner_radius, 0);

//Health-Text
draw_set_font(fnt_hud);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_set_colour(colour_font);
draw_text(
    xp_bar_x,
    xp_bar_y,
    string(int64(progress.level))
    );
    
draw_set_valign(fa_top);
draw_set_halign(fa_left);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Geld des Charakters
//Geld-Bar
money_scale = clamp(money_scale, 0, radius);
money_scale -= 0.2;

//Hintergrund
draw_set_colour(colour_circle_bg);
draw_set_alpha(inv_hud.alpha_bbg);
draw_circle(money_bar_x, money_bar_y, radius + inner_radius + buffer, 0);
draw_set_alpha(1);

//Bar
draw_set_colour(colour_money);
draw_set_alpha(1);
draw_circle(money_bar_x, money_bar_y, inner_radius + money_scale + buffer, 0);

//Text BG
draw_set_colour(colour_circle_bg);
draw_set_alpha(1);
draw_circle(money_bar_x, money_bar_y, inner_radius, 0);

//Health-Text
draw_set_font(fnt_hud);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_set_colour(colour_font);
draw_text(
    money_bar_x,
    money_bar_y,
    string(int64(progress.run_money))
    );
    
draw_set_valign(fa_top);
draw_set_halign(fa_left);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hintergrund Pickups
///Hintergrund
draw_set_colour(inv_hud.colour_trans);
draw_set_alpha(inv_hud.alpha_bbg);

draw_circle(
    hud_pickups_bg_x,
    hud_pickups_bg_y,
    pickups_radius_bg,
    0
    );
    
draw_set_colour(global.co_blue_gray_900);
draw_set_alpha(inv_hud.alpha_bbg);

draw_circle(
    hud_pickups_bg_x,
    hud_pickups_bg_y,
    pickups_radius_bg - buffer,
    0
    );
    
draw_set_alpha(1);
draw_set_colour(c_white);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Pickup Slots
//Linien
draw_set_alpha(0.8);
draw_set_colour(colour_circle_bg);

draw_line_width(slots_x[0], slots_y[0], slots_x[1], slots_y[1], line_width);
draw_line_width(slots_x[1], slots_y[1], slots_x[2], slots_y[2], line_width);
draw_line_width(slots_x[2], slots_y[2], slots_x[3], slots_y[3], line_width);
draw_line_width(slots_x[0], slots_y[0], slots_x[3], slots_y[3], line_width);

//Kreis
draw_circle(hud_pickups_bg_x, hud_pickups_bg_y, 20, 0);

for(var i = 0; i &lt; array_length_1d(slots_angle); i++) {
//Hintergrund
draw_set_colour(colour_circle_bg);
draw_set_alpha(inv_hud.alpha_bbg);
draw_circle(slots_x[i], slots_y[i], pickups_radius, 0);
draw_set_alpha(1);

if(i == inventory.menupos) {
    draw_set_alpha(0.8);
    draw_set_colour(c_white);
    draw_circle(slots_x[i], slots_y[i], pickups_radius - buffer, 0);
}
draw_set_alpha(1);
if(inventory.inv_pickups.inv[i] != -1) {
    draw_sprite(spr_items, inventory.inv_pickups.inv[i], slots_x[i], slots_y[i]);
}
scr_draw_count(inventory.inv_pickups.count[i], slots_x[i], slots_y[i]);

draw_set_alpha(0.8);
draw_set_colour(colour_circle_bg);
draw_circle(numbers_x[i], numbers_y[i], 10, 0);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_set_font(fnt_hud);
draw_set_colour(c_white);
draw_text(numbers_x[i], numbers_y[i], string(i+1));
draw_set_halign(fa_left);
draw_set_valign(fa_top);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
