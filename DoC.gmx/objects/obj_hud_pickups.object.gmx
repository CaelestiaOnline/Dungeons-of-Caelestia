<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Koordinaten Pickups
//Hintergrund
hud_pickups_bg_x1 = display_get_gui_width() - 300;
hud_pickups_bg_x2 = display_get_gui_width() - 0;
hud_pickups_bg_y1 = display_get_gui_height() - 300;
hud_pickups_bg_y2 = display_get_gui_height() - 0;

hud_pickups_bg_x = (hud_pickups_bg_x1 + hud_pickups_bg_x2)/2;
hud_pickups_bg_y = (hud_pickups_bg_y1 + hud_pickups_bg_y2)/2;

pickups_radius_bg = 128;

//Bars
slots_x[0] = 0;
slots_x[1] = 0;
slots_x[2] = 0;
slots_x[3] = 0;

slots_y[0] = 0;
slots_y[1] = 0;
slots_y[2] = 0;
slots_y[3] = 0;

slots_angle[0] = 0;
slots_angle[1] = 90;
slots_angle[2] = 180;
slots_angle[3] = 270;

line_x[0] = 0;
line_x[1] = 0;
line_x[2] = 0;
line_x[3] = 0;

line_y[0] = 0;
line_y[1] = 0;
line_y[2] = 0;
line_y[3] = 0;

line_angle[0] = 0 + 45;
line_angle[1] = 90 + 45;
line_angle[2] = 180 + 45;
line_angle[3] = 270 + 45;

line_buffer = 100;

pickups_orbit_speed = 6;

real_orbit_speed = 0;

pickups_bar_buffer = 72;

pickups_radius = 32;

number_buffer = 32;

numbers_x[0] = 0;
numbers_x[1] = 0;
numbers_x[2] = 0;
numbers_x[3] = 0;

numbers_y[0] = 0;
numbers_y[1] = 0;
numbers_y[2] = 0;
numbers_y[3] = 0;

buffer = 4;

line_width = 4;

//Farben
colour_circle_bg = global.co_blue_gray_800; 
colour_font = c_white;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drehung Pickups
real_orbit_speed = 0;
if(slots_angle[inventory.menupos] &gt; 0 &amp;&amp; slots_angle[inventory.menupos] &lt; 180) real_orbit_speed = -pickups_orbit_speed;
else if(slots_angle[inventory.menupos] &gt;= 180 &amp;&amp; slots_angle[inventory.menupos] &lt; 360) real_orbit_speed = pickups_orbit_speed;
else real_orbit_speed = 0;

for(var i = 0; i &lt; array_length_1d(slots_angle); i++) {
    slots_x[i] = lengthdir_x(pickups_bar_buffer, slots_angle[i] + 90) + hud_pickups_bg_x;
    slots_y[i] = lengthdir_y(pickups_bar_buffer, slots_angle[i] + 90) + hud_pickups_bg_y;
    numbers_x[i] = lengthdir_x(number_buffer, slots_angle[i] + 90) + hud_pickups_bg_x;
    numbers_y[i] = lengthdir_y(number_buffer, slots_angle[i] + 90) + hud_pickups_bg_y;
    if(sign(real_orbit_speed) == -1) {
        if(slots_angle[i] &lt; 0) slots_angle[i] += 360;
    } 
    if(sign(real_orbit_speed) == 1) {
        if(slots_angle[i] &gt; 360) slots_angle[i] -= 360;
    }
    //slots_angle[i] += orbit_speed;
}

if(slots_angle[inventory.menupos] != 0) {
    for(var i = 0; i &lt; array_length_1d(slots_angle); i++) {
        slots_angle[i] += real_orbit_speed;
    }
}


/*
var pos = inventory.menupos;

slots_angle[pos] = 90;

if((pos+1) &gt; 3) pos -= 3; 
else pos++;
slots_angle[pos] = 180;

if((pos+1) &gt; 3) pos -= 3; 
else pos++;
slots_angle[pos] = 270;

if((pos+1) &gt; 3) pos -= 3; 
else pos++;
slots_angle[pos] = 0;  
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drehung Linien
line_angle[0] = slots_angle[0] + 45;
line_angle[1] = slots_angle[1] + 45;
line_angle[2] = slots_angle[2] + 45;
line_angle[3] = slots_angle[3] + 45;

for(var i = 0; i &lt; array_length_1d(slots_angle); i++) {
    line_x[i] = lengthdir_x(line_buffer, line_angle[i] + 90) + hud_pickups_bg_x;
    line_y[i] = lengthdir_y(line_buffer, line_angle[i] + 90) + hud_pickups_bg_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///exit
if(!admin.playing) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hintergrund Pickups
///Hintergrund
draw_set_colour(inv_hud.colour_trans);
draw_set_alpha(inv_hud.alpha_bbg);

draw_circle(
    hud_pickups_bg_x,
    hud_pickups_bg_y,
    pickups_radius_bg,
    0
    );
    
draw_set_colour(global.co_blue_gray_900);
draw_set_alpha(inv_hud.alpha_bbg);

draw_circle(
    hud_pickups_bg_x,
    hud_pickups_bg_y,
    pickups_radius_bg - buffer,
    0
    );
    
draw_set_alpha(1);
draw_set_colour(c_white);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Linien
//Linien
draw_set_alpha(0.8);
draw_set_colour(colour_circle_bg);

draw_line_width(slots_x[0], slots_y[0], slots_x[1], slots_y[1], line_width);
draw_line_width(slots_x[1], slots_y[1], slots_x[2], slots_y[2], line_width);
draw_line_width(slots_x[2], slots_y[2], slots_x[3], slots_y[3], line_width);
draw_line_width(slots_x[0], slots_y[0], slots_x[3], slots_y[3], line_width);

draw_set_alpha(0.8);
draw_set_colour(colour_circle_bg);

draw_line_width(line_x[0], line_y[0], line_x[1], line_y[1], line_width);
draw_line_width(line_x[0], line_y[0], line_x[3], line_y[3], line_width);
draw_line_width(line_x[1], line_y[1], line_x[2], line_y[2], line_width);
draw_line_width(line_x[2], line_y[2], line_x[3], line_y[3], line_width);

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Pickup Slots

//Kreis
draw_circle(hud_pickups_bg_x, hud_pickups_bg_y, 20, 0);

for(var i = 0; i &lt; array_length_1d(slots_angle); i++) {
//Hintergrund
draw_set_colour(colour_circle_bg);
draw_set_alpha(inv_hud.alpha_bbg);
draw_circle(slots_x[i], slots_y[i], pickups_radius, 0);
draw_set_alpha(1);

if(i == inventory.menupos) {
    draw_set_alpha(0.8);
    draw_set_colour(c_white);
    draw_circle(slots_x[i], slots_y[i], pickups_radius - buffer, 0);
    
    var countdown = inventory.alarm[2] / inventory.pickup_countdown;
    scr_draw_slot_cooldown(countdown, slots_x[i], slots_y[i]);
}
draw_set_alpha(1);
if(inventory.inv_pickups.inv[i] != -1) {
    draw_sprite(spr_items, inventory.inv_pickups.inv[i], slots_x[i], slots_y[i]);
}

draw_set_alpha(0.8);
draw_set_colour(colour_circle_bg);
draw_circle(numbers_x[i], numbers_y[i], 10, 0);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_set_font(fnt_hud);
draw_set_colour(c_white);
draw_text(numbers_x[i], numbers_y[i], string(i+1));
draw_set_halign(fa_left);
draw_set_valign(fa_top);

scr_draw_count(inventory.inv_pickups.count[i], slots_x[i], slots_y[i]);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
