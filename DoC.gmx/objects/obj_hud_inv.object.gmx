<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Koordianten des Inventar-Hintergrunds
inv_bg_x1 = 0;
inv_bg_x2 = display_get_gui_width();

inv_bg_y1 = 0;
inv_bg_y2 = display_get_gui_height();

inv_slot_dist = 16;

width = sprite_get_width(spr_inv_border)/2;

//Slots
inv_slots_x1 = 70;
inv_slots_x2 = inv_slots_x1 + ((width*2)*5) + (inv_slot_dist*4);

inv_slots_y1 = 150;
inv_slots_y2 = inv_slots_y1 + (width*2)*7 + inv_slot_dist*6;

//Storage
inventory.inv_storage.inv_x = inv_slots_x1 + width;
inventory.inv_storage.inv_y = inv_slots_y1 + width + width*2*6 + inv_slot_dist*6;
//Items
inventory.inv_items.inv_x = inv_slots_x1 + width;
inventory.inv_items.inv_y = inv_slots_y1 + width + width*2*2 + inv_slot_dist*2;
//Pickups
inventory.inv_pickups.inv_x = inv_slots_x1 + width;
inventory.inv_pickups.inv_y = inv_slots_y1 + width + width*2*4 + inv_slot_dist*4;
//prim
inventory.inv_prim.inv_x = inv_slots_x1 + width;
inventory.inv_prim.inv_y = inv_slots_y1 + width;
//sec
inventory.inv_sec.inv_x = inv_slots_x1 + width + width*2*2 + inv_slot_dist*2;
inventory.inv_sec.inv_y = inv_slots_y1 + width;
//mag
inventory.inv_mag.inv_x = inv_slots_x1 + width + width*2*4 + inv_slot_dist*4;
inventory.inv_mag.inv_y = inv_slots_y1 + width;

//Charakter-Stats
inv_char_bg_x1 = display_get_gui_width() - 100 - 500;
inv_char_bg_x2 = display_get_gui_width() - 200;

inv_char_bg_y1 = inv_slots_y1;
inv_char_bg_y2 = inv_slots_y1 + 450;

//Item-Stats
inv_item_stats_bg_x1 = inv_char_bg_x1;
inv_item_stats_bg_x2 = inv_char_bg_x2;

inv_item_stats_bg_y1 = inv_char_bg_y2 + 50;
inv_item_stats_bg_y2 = display_get_gui_height()-10;

//Level
inv_level_x1 = inv_slots_x1;
inv_level_x2 = inv_level_x1 + 400;

inv_level_y1 = inv_slots_y2 + 70;
inv_level_y2 = inv_level_y1 + 150;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button-Koordinaten
//Del-Button
del_button = 0;
del_button_x = inv_slots_x2 + width + inv_slot_dist;
del_button_y = inventory.inv_storage.inv_y;

//Drop-Button
drop_button = 0;
drop_button_x = inv_slots_x2 + width + inv_slot_dist;
drop_button_y = inventory.inv_pickups.inv_y;






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item - Stats
for(var i = 0; i &lt; 8; i++) {
    item_stats_heading_array[i] = 0;
}

for(var i = 0; i &lt; 8; i++) {
    item_stats_array[i] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Char
circle_radius[0] = 300;
circle_radius[1] = 200;
circle_radius[2] = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Farben
colour_font = global.co_indigo_50;
colour_heading = global.co_indigo_500;
colour_trans = global.co_blue_gray_1000;
alpha_bg = 0.5;
alpha_bbg = 0.8;

item_stats_heading_colour = c_white;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Punkte
orbit = 320;

angle[0] = 360/6*0;
/*
angle[1] = 360/6*1;
angle[2] = 360/6*2;
angle[3] = 360/6*3;
angle[4] = 360/6*4;
angle[5] = 360/6*5;
*/
pre_angle[0] = 360/6*0;
/*
pre_angle[1] = 360/6*1;
pre_angle[2] = 360/6*2;
pre_angle[3] = 360/6*3;
pre_angle[4] = 360/6*4;
pre_angle[5] = 360/6*5;
*/
orbit_acc = 0.05;
orbit_speed[0] = 1;
/*
orbit_speed[1] = 1;
orbit_speed[2] = 1;
orbit_speed[3] = 1;
orbit_speed[4] = 1;
orbit_speed[5] = 1;
*/
center_x = display_get_gui_width()/2 - 100;
center_y = display_get_gui_height()/2;

orbit_x[0] = 0;
/*
orbit_x[1] = 0;
orbit_x[2] = 0;
orbit_x[3] = 0;
orbit_x[4] = 0;
orbit_x[5] = 0;
*/

orbit_y[0] = 0;
/*
orbit_y[1] = 0;
orbit_y[2] = 0;
orbit_y[3] = 0;
orbit_y[4] = 0;
orbit_y[5] = 0;
*/

alarm_set(0, room_speed*2);

line_width = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show inv
if(inventory.show_inv) {
    if(del_button == 0) {
        del_button = instance_create(del_button_x, del_button_y, obj_inv_button_delete);
    }
    if(drop_button = 0) {
        drop_button = instance_create(drop_button_x, drop_button_y, obj_inv_button_drop);
    }
    
} else {
    with(del_button) {
        instance_destroy();
    }
    del_button = 0;
    with(drop_button) {
        instance_destroy();
    }
    drop_button = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dynamisches Window
inv_bg_x1 = 0;
inv_bg_x2 = display_get_gui_width();

inv_bg_y1 = 0;
inv_bg_y2 = display_get_gui_height();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit
if(!inventory.show_inv) exit;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slots
//Hintergrund
draw_set_colour(colour_trans);
draw_set_alpha(0.05);
draw_rectangle(
    inv_slots_x1,
    inv_slots_y1,
    inv_slots_x2,
    inv_slots_y2,
    0
);
draw_set_alpha(1);

//Heading
draw_set_colour(colour_heading);
draw_set_valign(fa_middle);
draw_rectangle(
    inv_slots_x1,
    inv_slots_y1 - 8 - 32,
    inv_slots_x2,
    inv_slots_y1 - 8,
    0
);

draw_set_colour(colour_font);
draw_set_font(fnt_inv_heading);
draw_text(
    inv_slots_x1 + 8,
    inv_slots_y1 - 8 - 16,
    "INVENTORY"
);
draw_set_valign(fa_top);

//Slots
scr_draw_slots(inv_slots_x1, inv_slots_y1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Heading special slots
//Heading Trash
draw_set_colour(colour_heading);
draw_set_valign(fa_middle);
draw_rectangle(
    del_button_x - width,
    del_button_y - width - 8 - 24,
    del_button_x + width,
    del_button_y - width - 8,
    0
);

draw_set_colour(colour_font);
draw_set_font(fnt_inv_heading_sec);
draw_text(
    del_button_x,
    del_button_y - width - 8 - 12,
    "TRASH"
);
draw_set_valign(fa_top);

//Heading Drop
draw_set_colour(colour_heading);
draw_set_valign(fa_middle);
draw_rectangle(
    drop_button_x - width,
    drop_button_y - width - 8 - 24,
    drop_button_x + width,
    drop_button_y - width - 8,
    0
);

draw_set_colour(colour_font);
draw_set_font(fnt_inv_heading_sec);
draw_text(
    drop_button_x,
    drop_button_y - width - 8 - 12,
    "DROP"
);
draw_set_valign(fa_top);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Charakter-Stats
//Hintergrund
draw_set_halign(fa_left);
draw_set_colour(colour_trans);
/*
draw_set_alpha(0.3);
draw_rectangle(
    inv_char_bg_x1,
    inv_char_bg_y1,
    inv_char_bg_x2,
    inv_char_bg_y2,
    0
);
*/
draw_set_alpha(1);

//Heading
draw_set_colour(colour_heading);
draw_set_valign(fa_middle);
draw_rectangle(
    inv_char_bg_x1,
    inv_char_bg_y1 - 8 - 32,
    inv_char_bg_x2,
    inv_char_bg_y1 - 8,
    0
);

draw_set_colour(colour_font);
draw_set_font(fnt_inv_heading);
draw_text(
    inv_char_bg_x1 + 8,
    inv_char_bg_y1 - 8 - 16,
    "CHARACTER STATS"
);
draw_set_valign(fa_top);

//Character-Stats
draw_set_font(fnt_inv_stats);
draw_set_halign(fa_left);
//Basic Stats
inv_char_basic_stats_y2 = inv_char_bg_y1 + 132;
//Hintergrund
draw_set_colour(colour_trans);
draw_set_alpha(alpha_bg);
draw_rectangle(
    inv_char_bg_x1,
    inv_char_bg_y1,
    inv_char_bg_x2,
    inv_char_basic_stats_y2,
    0
);
draw_set_alpha(1);

draw_set_colour(colour_font);

//HP
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_bg_y1 + 32,
    "Health:"
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_bg_y1 + 32,
    string(int64(player_stats.hp)) + " / " + string(player_stats.max_hp)
    );
//Mana
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_bg_y1 + 64,
    "Mana:"
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_bg_y1 + 64,
    string(int64(player_stats.mana)) + " / " + string(player_stats.max_mana)
    );
//Stamina
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_bg_y1 + 96,
    "Stamina:"
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_bg_y1 + 96,
    string(int64(player_stats.stamina)) + " / " + string(player_stats.max_stamina)
    );
    
//Angriff
inv_char_attack_stats_y1 = inv_char_basic_stats_y2 + 16;
inv_char_attack_stats_y2 = inv_char_attack_stats_y1 + 132;
//Hintergrund
draw_set_colour(colour_trans);
draw_set_alpha(alpha_bg);
draw_rectangle(
    inv_char_bg_x1,
    inv_char_attack_stats_y1,
    inv_char_bg_x2,
    inv_char_attack_stats_y2,
    0
);
draw_set_alpha(1);

draw_set_colour(colour_font);
//Schaden
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_attack_stats_y1 + 32,
    "Root Damage:"
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_attack_stats_y1 + 32,
    string(player_stats.root_damage * player_stats.strength_mult)
    );
//Krit-Chance
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_attack_stats_y1 + 64,
    "Critical Chance:"
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_attack_stats_y1 + 64,
    string(player_stats.chance_crit*100) + "%"
    );
//Angriffsgeschwindigkeit
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_attack_stats_y1 + 96,
    "Attack Speed:"
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_attack_stats_y1 + 96,
    string(player_stats.attack_speed/room_speed) + "s"
    );
    
//Speed
inv_char_speed_stats_y1 = inv_char_attack_stats_y2 + 16;
inv_char_speed_stats_y2 = inv_char_speed_stats_y1 + 132;
//Hintergrund
draw_set_colour(colour_trans);
draw_set_alpha(alpha_bg);
draw_rectangle(
    inv_char_bg_x1,
    inv_char_speed_stats_y1,
    inv_char_bg_x2,
    inv_char_speed_stats_y2,
    0
);
draw_set_alpha(1);

draw_set_colour(colour_font);
//Speed
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_speed_stats_y1 + 32,
    "Max Speed: "
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_speed_stats_y1 + 32,
    string(int64(player_stats.max_player_speed * room_speed)) + "px/s"
    );
//Sprinten
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_speed_stats_y1 + 64,
    "Sprint Speed:"
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_speed_stats_y1 + 64,
    string(int64(player_stats.max_player_sprint_speed*room_speed)) + "px/s"
    );
//Beschleunigung
draw_text(
    inv_char_bg_x1 + 32,
    inv_char_speed_stats_y1 + 96,
    "Acceleration:"
    
    );
draw_text(
    inv_char_bg_x2 - 100,
    inv_char_speed_stats_y1 + 96,
    string(player_stats.player_acc * room_speed) + "px/s^2"
    );
    
    
    
/*
var mwidth = (inv_char_bg_x1+inv_char_bg_x2)/2;
var mheight = (inv_char_bg_y1+inv_char_bg_y2)/2;
var radius = 75;

//Linien
draw_set_colour(c_gray);
var health_x = mwidth + lengthdir_x(radius - 5, 85);
var health_y = mheight + lengthdir_y(radius - 5, 85);
var health_end_x = 900; 
var health_end_y = 450; 
draw_line_width(health_x, health_y, health_end_x , health_end_y, 5);
draw_line_width(health_end_x - 2, health_end_y, health_end_x + 130, health_end_y, 5);

var mana_x = mwidth + lengthdir_x(radius - 5, 35);
var mana_y = mheight + lengthdir_y(radius - 5, 35);
var mana_end_y = health_end_y + 75;
draw_line_width(mana_x, mana_y, health_end_x, mana_end_y, 5);
draw_line_width(health_end_x - 2, mana_end_y, health_end_x + 130, mana_end_y, 5);

var stamina_x = mwidth + lengthdir_x(radius - 5, 360 - 25);
var stamina_y = mheight + lengthdir_y(radius - 5, 360 - 25);
var stamina_end_y = mana_end_y + 75;
draw_line_width(stamina_x, stamina_y, health_end_x, stamina_end_y, 5);
draw_line_width(health_end_x - 2, stamina_end_y, health_end_x + 130, stamina_end_y, 5);

//Kreis
circle_dir += 1;
if(circle_dir &gt;= 360) circle_dir = 0;
draw_sprite_ext(spr_inv_circle, 0, mwidth, mheight, 1, 1, circle_dir, c_white, 1);


//Stats
draw_set_font(fnt_inv_stats);
draw_set_halign(fa_left);
draw_set_colour(make_colour_hsv(0, 240, 200));
draw_text(health_end_x + 10, health_end_y - 30, "HEALTH: " + string(int64(player_stats.hp)) + " / " + string(player_stats.max_hp));
draw_set_colour(make_colour_hsv(120, 240, 200));
draw_text(health_end_x + 10, mana_end_y - 30, "MANA: " + string(int64(player_stats.mana)) + " / " + string(player_stats.max_mana));
draw_set_colour(make_colour_hsv(147, 240, 200));
draw_text(health_end_x + 10, stamina_end_y - 30, "STAMINA: " + string(int64(player_stats.stamina)) + " / " + string(player_stats.max_stamina));
draw_set_colour(c_white);

//Char
draw_sprite(spr_charakter, 0, mwidth, mheight);
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item-Stats

//Hintergrund
draw_set_colour(colour_trans);
draw_set_alpha(alpha_bg);
draw_rectangle(
    inv_item_stats_bg_x1,
    inv_item_stats_bg_y1,
    inv_item_stats_bg_x2,
    inv_item_stats_bg_y2,
    0
);
draw_set_alpha(1);

//Heading
draw_set_colour(colour_heading);
draw_set_valign(fa_middle);
draw_rectangle(
    inv_item_stats_bg_x1,
    inv_item_stats_bg_y1 - 8 - 32,
    inv_item_stats_bg_x2,
    inv_item_stats_bg_y1 - 8,
    0
);

draw_set_colour(colour_font);
draw_set_font(fnt_inv_heading);
draw_text(
    inv_item_stats_bg_x1 + 8,
    inv_item_stats_bg_y1 - 8 - 16,
    "ITEM STATS"
);

draw_set_valign(fa_top);

//Titel
draw_set_colour(item_stats_heading_colour);
draw_set_font(fnt_item_stats_title);
draw_text_ext(
    inv_item_stats_bg_x1 + 32,
    inv_item_stats_bg_y1 + 24,
    inventory.item_stats_title,
    15,
    380
    );

//Beschreibung
draw_set_colour(c_white);
draw_set_font(fnt_inv_stats);
draw_text_ext(
    inv_item_stats_bg_x1 + 32,
    inv_item_stats_bg_y1 + 32 + 24,
    inventory.item_stats_desc,
    20,
    300
    );
    
for(var i = 0; i &lt; array_length_1d(item_stats_heading_array); i++) {
    if(item_stats_heading_array[i] != 0) {
    draw_text(
    inv_item_stats_bg_x1 + 32,
    inv_item_stats_bg_y1 + 32*3 + 48 + 32*i,
    item_stats_heading_array[i]
    );
    }
}

for(var i = 0; i &lt; array_length_1d(item_stats_array); i++) {
    if(item_stats_heading_array[i] != 0) {
    if(item_stats_array[i] == "" || item_stats_array[i] == 0) {
        item_stats_array[i] = "-/-";
    }
    draw_text_ext(
    inv_item_stats_bg_x2 - 200,
    inv_item_stats_bg_y1 + 32*3 + 48 + 32*i,
    item_stats_array[i],
    20,
    180
    );
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Char
//Hintergrund
var middle_x = display_get_gui_width()/2 - 100;
var middle_y = display_get_gui_height()/2;
draw_set_colour(colour_trans);
draw_set_alpha(alpha_bg);
draw_set_colour(colour_font);
draw_circle(middle_x, middle_y, 320, 0)
draw_set_alpha(alpha_bg);
draw_set_colour(colour_trans);

//Kreise
circle_radius[0] = clamp(circle_radius[0] + random_range(-1, 1), 280, 315);
draw_circle(middle_x, middle_y, circle_radius[0], 0);
circle_radius[1] = clamp(circle_radius[1] + random_range(-1, 1), 180, 215);
draw_circle(middle_x, middle_y, circle_radius[1], 0)
circle_radius[2] = clamp(circle_radius[2] + random_range(-1, 1), 80, 115);
draw_circle(middle_x, middle_y, circle_radius[2], 0)

//Punkte
//Orbit Speed
var n;
for(n = 0; n &lt; (array_length_1d(angle)); n++) {
    angle[n] += orbit_speed[n];
    if(angle[n] &gt;= pre_angle[n] + 360) angle[n] -= 360;
}

//Orbit Speed Beschleunigung
var b;
for(b = 0; b &lt; (array_length_1d(angle)); b++) {
    if(angle[b] &lt; pre_angle[b]+180 &amp;&amp; angle[b] &gt;= pre_angle[b]+0) {
        if(orbit_speed[b] &lt; 5) {
            orbit_speed[b] += orbit_acc;
        }
        else {
            orbit_speed[b] = 5;
        }
    }
    if(angle[b] &gt;= pre_angle[b]+180 &amp;&amp; angle[b] &lt; pre_angle[b]+360) {
        if(orbit_speed[b] &gt; orbit_acc) {
            orbit_speed[b] -= orbit_acc;
        }
        else {
            orbit_speed[b] = 0;
        }
    }
}

//Setze x und y Variablen
var m;
for(m = 0; m &lt; (array_length_1d(angle)); m++) {
    orbit_x[m] = lengthdir_x(orbit, angle[m] + 90) + center_x;
    orbit_y[m] = lengthdir_y(orbit, angle[m] + 90) + center_y;
}

//Alarm
if(alarm_get(0) == -1) alarm_set(0, room_speed*2);
/*
//Linien
draw_line_width(orbit_x[0], orbit_y[0], orbit_x[1], orbit_y[1], line_width);
//draw_line_width(orbit_x[1], orbit_y[1], orbit_x[2], orbit_y[2], line_width);
draw_line_width(orbit_x[2], orbit_y[2], orbit_x[3], orbit_y[3], line_width);
//draw_line_width(orbit_x[3], orbit_y[3], orbit_x[4], orbit_y[4], line_width);
draw_line_width(orbit_x[4], orbit_y[4], orbit_x[5], orbit_y[5], line_width);
//draw_line_width(orbit_x[5], orbit_y[5], orbit_x[6], orbit_y[6], line_width);
*/
draw_set_alpha(1);
//Punkte
orbit = circle_radius[0];
for(var i = 0; i &lt; array_length_1d(angle); i++) {
    draw_circle(orbit_x[i], orbit_y[i], 10, 0)
}
//Augenbewegung
draw_set_alpha(1);
draw_sprite(spr_charakter_no_eyes, 0, middle_x, middle_y);
var eye1_x_old = middle_x + (49 - 32);
var eye1_y_old = middle_y + (24 - 32);
var eye2_x_old = middle_x + (17 - 32);
var eye2_y_old = middle_y + (25 - 32);

var eye1_x = eye1_x_old + sign(device_mouse_x_to_gui(0) - middle_x);
var eye1_y = eye1_y_old + sign(device_mouse_y_to_gui(0) - middle_y);

var eye2_x = eye2_x_old + sign(device_mouse_x_to_gui(0) - middle_x);
var eye2_y = eye2_y_old + sign(device_mouse_y_to_gui(0) - middle_y);

draw_set_colour(c_black);
draw_circle(eye1_x, eye1_y, 4, 0);
draw_circle(eye2_x, eye2_y, 4, 0);

//Char Beschreibung
draw_set_alpha(1);
draw_set_colour(colour_font);
draw_set_halign(fa_center);
draw_set_font(fnt_inv_heading);
var text_y = middle_y - 432;
draw_text(middle_x, text_y, "Species: " + scr_get_char_string(player_stats.char_index));
draw_text(middle_x, text_y + 32, "Origin: " + "HUMAN");
draw_text(middle_x, text_y + 64, "- " + player_stats.name + " -");
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slot-Beschreibung
draw_set_font(fnt_hud);
draw_set_colour(c_white);
draw_set_halign(fa_center);
//Storage
var storage_text = "STORAGE";
var storage_x = inventory.inv_storage.inv_x;
var storage_y = inventory.inv_storage.inv_y - width - 24;

draw_text(storage_x, storage_y, storage_text); 

//Pickups
var pickups_text = "PICKUPS";
var pickups_x = inventory.inv_pickups.inv_x;
var pickups_y = inventory.inv_pickups.inv_y - width - 24;

draw_text(pickups_x, pickups_y, pickups_text); 

//Items
var items_text = "ITEMS";
var items_x = inventory.inv_items.inv_x;
var items_y = inventory.inv_items.inv_y - width - 24;

draw_text(items_x, items_y, items_text);

//Magie
var mag_text = "MAGIC";
var mag_x = inventory.inv_mag.inv_x;
var mag_y = inventory.inv_mag.inv_y + width + 8;

draw_text(mag_x, mag_y, mag_text);

//Sekundärwaffe
var sec_text = "SEC WEAPON";
var sec_x = inventory.inv_sec.inv_x;
var sec_y = inventory.inv_sec.inv_y  + width + 8;

draw_text(sec_x, sec_y, sec_text);

//Primärwaffe
var prim_text = "PRIM WEAPON";
var prim_x = inventory.inv_prim.inv_x;
var prim_y = inventory.inv_prim.inv_y  + width + 8;

draw_text(prim_x, prim_y, prim_text);

draw_set_halign(fa_left);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level
//Hintergrund
draw_set_colour(colour_trans);
draw_set_alpha(alpha_bg);
draw_rectangle(
    inv_level_x1,
    inv_level_y1,
    inv_level_x2,
    inv_level_y2,
    0
);
draw_set_alpha(1);

//Heading
draw_set_colour(colour_heading);
draw_set_valign(fa_middle);
draw_rectangle(
    inv_level_x1,
    inv_level_y1 - 8 - 32,
    inv_level_x2,
    inv_level_y1 - 8,
    0
);

draw_set_colour(colour_font);
draw_set_font(fnt_inv_heading);
draw_text(
    inv_level_x1 + 8,
    inv_level_y1 - 8 - 16,
    "PROGRESS"
);
draw_set_valign(fa_top);

//Level, XP, Prozent
var text1_y = inv_level_y1 + 32;
draw_set_colour(colour_font);
draw_set_font(fnt_inv_stats);
draw_set_halign(fa_left);
draw_set_alpha(1);

//Level
var passive_xp = round(frac(progress.level) * scr_get_level_up_xp());

draw_text(
    inv_level_x1 + 32,
    text1_y,
    "Level " + string(progress.level)
    );
//XP
draw_text(
    (inv_level_x1 + inv_level_x2)/2 - 32,
    text1_y,
    "XP: " + string(progress.xp+passive_xp) + " / " + string(scr_get_level_up_xp())
    );

//Prozent
var percent_text;
if(admin.in_run) {
    percent_text = string(((progress.xp+passive_xp) / scr_get_level_up_xp())*100) + "%";
} else {
    percent_text = string(frac(progress.level)*100) + "%";
}

draw_text(
    inv_level_x2 - string_width(percent_text) - 32,
    text1_y,
    percent_text
    );
    
//Bar
var bar_buffer = 32;
var bar2_y = text1_y + 32;
var bar_height = 32;
var bar_width = inv_level_x2 - inv_level_x1 - bar_buffer - bar_buffer;
var bar_x = inv_level_x1 + bar_buffer;
var buffer = 2;

var xp_scale;
xp_scale = progress.xp + passive_xp / scr_get_level_up_xp();
xp_scale = clamp(xp_scale, 0, 1);

//Hintergrund
draw_set_colour(colour_trans);
draw_set_alpha(alpha_bbg);
draw_rectangle(bar_x, bar2_y, bar_x + bar_width, bar2_y + bar_height, 0);
draw_set_alpha(1);

//Bar
draw_set_colour(colour_font);
draw_set_alpha(1);
draw_rectangle(bar_x + buffer, bar2_y + buffer, bar_x + ((bar_width - buffer) * xp_scale), bar2_y + bar_height - buffer, 0);

//Geld
var text3_y = (bar2_y + bar_height) + 16;
draw_set_colour(colour_font);
draw_set_font(fnt_inv_stats);
draw_set_halign(fa_left);
draw_set_alpha(1);

//Geld
var money_value;
var currency;
if(admin.in_run) {
    money_value = string(progress.run_money) + ".00";
    currency = "RM";
} else {
    money_value = string(progress.hub_money) + "";
    currency = "HM";
}
var money_text = "Balance: " + money_value + currency;
draw_text(
    inv_level_x1 + 32,
    text3_y,
    money_text
    );


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
