<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard Variablen

//Taste: W
global.kb_w = 0;
global.kb_w_pressed = 0;

//Taste: A
global.kb_a = 0;
global.kb_a_pressed = 0;

//Taste: S
global.kb_s = 0;
global.kb_s_pressed = 0;

//Taste: D
global.kb_d = 0;
global.kb_d_pressed = 0;

//Taste: Space
global.kb_space = 0;
global.kb_space_pressed = 0;

//Taste: Left-Shift
global.kb_lshift = 0;
global.kb_lshift_prssed = 0;

//Taste: Left-Ctrl
global.kb_lctrl = 0;
global.kb_lctrl_pressed = 0;

//Taste: Enter
global.kb_enter = 0;
global.kb_enter_pressed = 0;

//Taste: Tab
global.kb_tab = 0;
global.kb_tab_pressed = 0;

//Taste: Esc
global.kb_esc = 0;
global.kb_esc_pressed = 0;

//Taste: F
global.kb_f = 0;
global.kb_f_pressed = 0;

//Taste: Q
global.kb_q = 0;
global.kb_q_pressed = 0;

//Taste: I
global.kb_i = 0;
global.kb_i_pressed = 0;

//Taste: E
global.kb_e = 0;
global.kb_e_pressed = 0;

//Taste: J
global.kb_j = 0;
global.kb_j_pressed = 0;

//Taste: L
global.kb_l = 0;
global.kb_l_pressed = 0;

//Taste: K
global.kb_k = 0;
global.kb_k_pressed = 0;

//Taste: up
global.kb_up = 0;
global.kb_up_pressed = 0;

//Taste: down
global.kb_down = 0;
global.kb_down_pressed = 0;

//Taste: left
global.kb_left = 0;
global.kb_left_pressed = 0;

//Taste: right
global.kb_right = 0;
global.kb_right_pressed = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse-Variablen
global.m_left = 0;
global.m_left_pressed = 0;

global.m_right = 0;
global.m_right_pressed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tasten zuordnen
///Tasten zuordnen
//Move up
up_key = 0;
up_key_pressed = 0;

//Move down
down_key = 0;
down_key_pressed = 0;

//Move left
left_key = 0;
left_key_pressed = 0;

//Move right
right_key = 0;
right_key_pressed = 0;

//primary Attack
prim_attack_key = 0;
prim_attack_key_pressed = 0;

//secondary Attack
sec_attack_key = 0;
sec_attack_key_pressed = 0;

//magic
magic_key = 0;
magic_key_pressed = 0;

//Sprint
sprint_key = 0;
sprint_key_pressed = 0;

//Interagieren
action_key = 0;
action_key_pressed = 0;

//Inventar
inventory_key = 0;
inventory_key_pressed = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Randomize
randomize();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loading_screen

loading_screen_time = 0;
loading_screen_goal = "";
loading_screen_heading = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm0

alarm_set(0, room_speed);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FPS
admin_fps = "60";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Farben
//Blue Gray
global.co_blue_gray_500 = make_colour_hsv(55, 30, 45);
global.co_blue_gray_800 = make_colour_hsv(55, 32, 21);
//Amber
global.co_amber_500 = make_colour_rgb(255, 193, 7);
//Indigo
global.co_indigo_500 = make_colour_hsv(64, 65, 70);
//Brown
global.co_brown_500 = make_colour_hsv(4, 40, 47);

random_colour = c_green;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kreis-Precision
draw_set_circle_precision(64);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///in-game
in_game = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisiere Keyboard-Variablen

//Taste: W
global.kb_w = keyboard_check(ord("W"));
global.kb_w_pressed = keyboard_check_pressed(ord("W"));

//Taste: A
global.kb_a = keyboard_check(ord("A"));
global.kb_a_pressed = keyboard_check_pressed(ord("A"));

//Taste: S
global.kb_s = keyboard_check(ord("S"));
global.kb_s_pressed = keyboard_check_pressed(ord("S"));

//Taste: D
global.kb_d = keyboard_check(ord("D"));
global.kb_d_pressed = keyboard_check_pressed(ord("D"));

//Taste: Space
global.kb_space = keyboard_check(vk_space);
global.kb_space_pressed = keyboard_check_pressed(vk_space);

//Taste: Left-Shift
global.kb_lshift = keyboard_check(vk_shift);
global.kb_lshift_pressed = keyboard_check_pressed(vk_shift);

//Taste: Left-Ctrl
global.kb_lctrl = keyboard_check(vk_control);
global.kb_lctrl_pressed = keyboard_check_pressed(vk_control);

//Taste: Enter
global.kb_enter = keyboard_check(vk_enter);
global.kb_enter_pressed = keyboard_check_pressed(vk_enter);

//Taste: Tab
global.kb_tab = keyboard_check(vk_tab);
global.kb_tab_pressed = keyboard_check_pressed(vk_tab);

//Taste: Esc
global.kb_esc = keyboard_check(vk_escape);
global.kb_esc_pressed = keyboard_check_pressed(vk_escape);

//Taste: F
global.kb_f = keyboard_check(ord("F"));
global.kb_f_pressed = keyboard_check_pressed(ord("F"));

//Taste: Q
global.kb_q = keyboard_check(ord("Q"));
global.kb_q_pressed = keyboard_check_pressed(ord("Q"));

//Taste: I
global.kb_i = keyboard_check(ord("I"));
global.kb_i_pressed = keyboard_check_pressed(ord("I"));

//Taste: E
global.kb_e = keyboard_check(ord("E"));
global.kb_e_pressed = keyboard_check_pressed(ord("E"));

//Taste: J
global.kb_j = keyboard_check(ord("J"));
global.kb_j_pressed = keyboard_check_pressed(ord("J"));

//Taste: L
global.kb_l = keyboard_check(ord("L"));
global.kb_l_pressed = keyboard_check_pressed(ord("L"));

//Taste: K
global.kb_k = keyboard_check(ord("K"));
global.kb_k_pressed = keyboard_check_pressed(ord("K"));

//Taste: up
global.kb_up = keyboard_check(vk_up);
global.kb_up_pressed = keyboard_check_pressed(vk_up);
//Taste: down
global.kb_down = keyboard_check(vk_down);
global.kb_down_pressed = keyboard_check_pressed(vk_down);

//Taste: left
global.kb_left = keyboard_check(vk_left);
global.kb_left_pressed = keyboard_check_pressed(vk_left);

//Taste: right
global.kb_right = keyboard_check(vk_right);
global.kb_right_pressed = keyboard_check_pressed(vk_right);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisiere Mouse-Eingaben
global.m_left = mouse_check_button(mb_left);
global.m_left_pressed = mouse_check_button_pressed(mb_left);

global.m_right = mouse_check_button(mb_right);
global.m_right_pressed = mouse_check_button_pressed(mb_right);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tasten zuordnen
//Move up
up_key = global.kb_w;
up_key_pressed = global.kb_w_pressed;

//Move down
down_key = global.kb_s;
down_key_pressed = global.kb_s_pressed;

//Move left
left_key = global.kb_a;
left_key_pressed = global.kb_a_pressed;

//Move right
right_key = global.kb_d;
right_key_pressed = global.kb_d_pressed;

//primary Attack
prim_attack_key = global.kb_space;
prim_attack_key_pressed = global.kb_space_pressed;

//secondary Attack
sec_attack_key = global.kb_f;
sec_attack_key_pressed = global.kb_f_pressed;

//magic
magic_key = global.kb_q;
magic_key_pressed = global.kb_q_pressed;

//Sprint
sprint_key = global.kb_lshift;
sprint_key_pressed = global.kb_lshift_pressed;

//Interagieren
action_key = global.kb_e;
action_key_pressed = global.kb_e_pressed;

//Inventar
inventory_key = global.kb_i;
inventory_key_pressed = global.kb_i_pressed;

//Pickup-Leiste
//Scroll left
pickup_menu_left_key = global.kb_j;
pickup_menu_left_key_pressed = global.kb_j_pressed;

//Scroll right
pickup_menu_right_key = global.kb_l;
pickup_menu_right_key_pressed = global.kb_l_pressed;

//Bestätigen
pickup_menu_confirm_key = global.kb_k;
pickup_menu_confirm_key_pressed = global.kb_k_pressed;


//Left-Click
left_click = global.m_left;
left_click_pressed = global.m_left_pressed;

//Right-Click
right_click = global.m_right;
right_click_pressed = global.m_right_pressed;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kontrolltasten
//Escape-Taste
if(room != rm_main_menu) {
    if(global.kb_esc_pressed &amp;&amp; !instance_exists(obj_fade)) scr_sidefade(rm_main_menu, 40);
}

if(room == rm_main_menu) {
    if(global.kb_esc_pressed) obj_main_menu.menupos = obj_main_menu.menulength - 1;
}

//Room-Refresh
if(global.kb_tab_pressed) room_restart();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm0

if(alarm_get(0) == -1) alarm_set(0, room_speed);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FPS
if(alarm_get(0) == 0) admin_fps = string(int64(fps_real));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Random Colour
random_colour = make_colour_hsv(
    random_range(0, 255),
    random_range(255*0.75, 255),
    random_range(255*0.25, 255)
    );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///in_game

if(instance_exists(obj_player)) {
    in_game = true;
} else {
    in_game = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setze GUI
display_set_gui_maximise(-1, -1);
display_set_gui_size(-1, -1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zeichne FPS + Zeit
draw_set_font(fnt_fps);
draw_set_colour(c_white);
draw_set_halign(fa_left);
draw_set_alpha(1);

draw_text(32, 16, "FPS: " + admin_fps);

//Zeit
//Minute
if(string_length(string(date_get_minute(date_current_datetime()))) &gt; 1) {
    minute = string(date_get_minute(date_current_datetime()));
}
else {
    minute = string(0) + string(date_get_minute(date_current_datetime()));
}
//Stunde
if(string_length(string(date_get_hour(date_current_datetime()))) &gt; 1) {
    hour = string(date_get_hour(date_current_datetime()));
}
else {
    hour = string(0) + string(date_get_hour(date_current_datetime()));
}

time = hour + ":" + minute;
draw_text(
    view_wview[0] - string_width(time) - 64,
    16,
    time
    );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test

if(instance_exists(obj_player)) {

}

//draw_text(100, 300, string(instance_exists(obj_hindernis)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
