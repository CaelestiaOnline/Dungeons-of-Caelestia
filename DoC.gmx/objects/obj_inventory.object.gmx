<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Konstanten
inv_slot_dist = 16;

width = sprite_get_width(spr_inv_border)/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sub-Inventor√≠es
inv_storage = 0;
inv_items = 0;
inv_pickups = 0;
inv_prim = 0;
inv_sec = 0;
inv_mag = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Inv
show_inv = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item-Stats
item_stats_title = "Hallo, Fremder!";
item_stats_desc = "Mit dem Mauszeiger ueber Item hovern, um momentan total unvollstaendige Beschreibung anzuzeigen!";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pickup Menu
menupos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory-Key
if(admin.inventory_key_pressed) {
    scr_invfade(1 - show_inv, "inv");
}

if(admin.in_game == false) {
    show_inv = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item-Objekte
if(admin.in_game) {

//inv_items
//Objektnamen einlesen
for(i = 0; i &lt; inv_items.max_item_slots; i++) {
    if(inv_items.inv[i] != -1) {
        inv_items.item_object[i] = item[inv_items.inv[i], 2];
    } else inv_items.item_object[i] = 0;
}

for(i = 0; i &lt; inv_items.max_item_slots; i++) {
    if(inv_items.item_object[i] != 0) {
        if(instance_exists(inv_items.real_item_object[i])) {
            if(string(inv_items.real_item_object[i].object_index) != string(inv_items.item_object[i])) {
                with(inv_items.real_item_object[i]) instance_destroy();
            }
        }
        if(!instance_exists(inv_items.item_object[i])) {
            inv_items.real_item_object[i] = instance_create(0, 0, inv_items.item_object[i]);
        }
    } else {
        if(instance_exists(inv_items.real_item_object[i])) {
            with(inv_items.real_item_object[i]) {
                instance_destroy();
            }
        }
    }
}
//inv_prim
//Objektnamen einlesen
for(i = 0; i &lt; inv_prim.max_item_slots; i++) {
    if(inv_prim.inv[i] != -1) {
        inv_prim.item_object[i] = item[inv_prim.inv[i], 2];
    } else inv_prim.item_object[i] = 0;
}

//Objekte erzeugen

//Objekte erzeugen
for(i = 0; i &lt; inv_prim.max_item_slots; i++) {
    if(inv_prim.item_object[i] != 0) {
        if(instance_exists(inv_prim.real_item_object[i])) {
            if(string(inv_prim.real_item_object[i].object_index) != string(inv_prim.item_object[i])) {
                with(inv_prim.real_item_object[i]) instance_destroy();
            }
        }
        if(!instance_exists(inv_prim.item_object[i])) {
            inv_prim.real_item_object[i] = instance_create(0, 0, inv_prim.item_object[i]);
        }
    } else {
        if(instance_exists(inv_prim.real_item_object[i])) {
            with(inv_prim.real_item_object[i]) {
                instance_destroy();
            }
        }
    }
}
var fist;

if(inv_prim.item_object[0] == 0) {
    if(!instance_exists(obj_fist)) {
        fist = instance_create(0, 0, obj_fist);
    }
}
else {
    if(instance_exists(obj_fist)) {
        with(obj_fist) instance_destroy();
    }
}



//inv_sec
//Objektnamen einlesen
for(i = 0; i &lt; inv_sec.max_item_slots; i++) {
    if(inv_sec.inv[i] != -1) {
        inv_sec.item_object[i] = item[inv_sec.inv[i], 2];
    } else inv_sec.item_object[i] = 0;
}

for(i = 0; i &lt; inv_sec.max_item_slots; i++) {
    if(inv_sec.item_object[i] != 0) {
        if(instance_exists(inv_sec.real_item_object[i])) {
            if(string(inv_sec.real_item_object[i].object_index) != string(inv_sec.item_object[i])) {
                with(inv_sec.real_item_object[i]) instance_destroy();
            }
        }
        if(!instance_exists(inv_sec.item_object[i])) {
            inv_sec.real_item_object[i] = instance_create(0, 0, inv_sec.item_object[i]);
        }
    } else {
        if(instance_exists(inv_sec.real_item_object[i])) {
            with(inv_sec.real_item_object[i]) {
                instance_destroy();
            }
        }
    }
}

//inv_mag
//Objektnamen einlesen
for(i = 0; i &lt; inv_mag.max_item_slots; i++) {
    if(inv_mag.inv[i] != -1) {
        inv_mag.item_object[i] = item[inv_mag.inv[i], 2];
    } else inv_mag.item_object[i] = 0;
}

for(i = 0; i &lt; inv_mag.max_item_slots; i++) {
    if(inv_mag.item_object[i] != 0) {
        if(instance_exists(inv_mag.real_item_object[i])) {
            if(string(inv_mag.real_item_object[i].object_index) != string(inv_mag.item_object[i])) {
                with(inv_mag.real_item_object[i]) instance_destroy();
            }
        }
        if(!instance_exists(inv_mag.item_object[i])) {
            inv_mag.real_item_object[i] = instance_create(0, 0, inv_mag.item_object[i]);
        }
    } else {
        if(instance_exists(inv_mag.real_item_object[i])) {
            with(inv_mag.real_item_object[i]) {
                instance_destroy();
            }
        }
    }
}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tasteneingaben bzw. menupos
move = 0;
menulength = inv_pickups.max_item_slots;


move -= max(admin.pickup_menu_left_key_pressed, 0);
move += max(admin.pickup_menu_right_key_pressed, 0);

if(move != 0) {
    menupos += move;
    if(menupos &lt; 0) menupos = menulength - 1;
    if(menupos &gt; menulength - 1) menupos = 0;
    alarm_set(1, room_speed/4);
}

if(!admin.pickup_menu_left_key_pressed) move -= max(admin.pickup_menu_left_key, 0);
if(!admin.pickup_menu_right_key_pressed) move += max(admin.pickup_menu_right_key, 0);

if(move != 0) {
    if(alarm_get(1) == -1) alarm_set(1, room_speed/4);
    if(alarm_get(1) == 0) {
    menupos += move;
    if(menupos &lt; 0) menupos = menulength - 1;
    if(menupos &gt; menulength - 1) menupos = 0;
    }
}

var push;
push = max(admin.pickup_menu_confirm_key_pressed, 0);
if(push == 1) {
    if(inv_pickups.inv[menupos] != -1) {
        instance_create(0, 0, item[inv_pickups.inv[menupos], 2]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
