<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Koordinaten
hub_menu_x1 = 0;
hub_menu_x2 = display_get_gui_width();

hub_menu_y1 = 0;
hub_menu_y2 = 64;

//Rechtecke
//Left
stats_menu_rectangle_left_bg_x1 =  64;
stats_menu_rectangle_left_bg_y1 =  128;

stats_menu_rectangle_left_bg_x2 =  stats_menu_rectangle_left_bg_x1 + 500;
stats_menu_rectangle_left_bg_y2 =  display_get_gui_height() - 64;

//Farben
colour_bg = global.co_blue_gray_900;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Koordinaten
//Exit_button
exit_button_x = hub_menu_x2 - 8*1 - 24 - 48*0;
exit_button_y = hub_menu_y1 + 32;
exit_button = instance_create(exit_button_x, exit_button_y, obj_hub_button_exit);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kontrolltasten
if(admin.pause_menu_key_pressed) scr_leave_hub_menu(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Men√ºleiste
draw_set_colour(inv_hud.colour_trans);

draw_rectangle(
    hub_menu_x1,
    hub_menu_y1,
    hub_menu_x2,
    hub_menu_y2,
    0
);
draw_set_alpha(1);

draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_colour(inv_hud.colour_font);
draw_set_font(fnt_inv_heading_prim);
draw_set_alpha(1);
draw_text(
    hub_menu_x1 + 16,
    hub_menu_y2 - 32,
    "STATS"
);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rechtecke
draw_set_colour(colour_bg);
draw_set_alpha(1);

draw_roundrect(
    stats_menu_rectangle_left_bg_x1,
    stats_menu_rectangle_left_bg_y1,
    stats_menu_rectangle_left_bg_x2,
    stats_menu_rectangle_left_bg_y2,
    false
);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run-Stats
draw_set_alpha(1);
draw_set_colour(c_white);
draw_set_font(fnt_stats_menu_normal);

//Bewegung
//Pxl Travelled
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 0 * 32,
    "Pixel travelled: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 0 * 32,
    string(savestats.pxl_travelled)
    );
//Pxl walked
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 1 * 32,
    "Pixel walked: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 1 * 32,
    string(savestats.pxl_walked)
    );
//Pxl Sprinted
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 2 * 32,
    "Pixel sprinted: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 2 * 32,
    string(savestats.pxl_sprinted)
    );
//Pxl crouched
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 3 * 32,
    "Pixel crouched: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 3 * 32,
    string(savestats.pxl_crouched)
    );
    
//HP
//HP healed
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 5 * 32,
    "HP healed: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 5 * 32,
    string(savestats.hp_healed)
    );
//Damage taken
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 6 * 32,
    "Damage Taken: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 6 * 32,
    string(savestats.damage_taken)
    );
    
//Angriff
//Damage taken
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 8 * 32,
    "Damage done: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 8 * 32,
    string(savestats.damage_done)
    );
    
//Attacks done
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 9 * 32,
    "Attacks done: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 9 * 32,
    string(savestats.attacks_done)
    );
//Prim attacks done
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 10 * 32,
    "Prim Attacks done: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 10 * 32,
    string(savestats.prim_attacks_done)
    );
//Melee attacks done
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 11 * 32,
    "Melee Attacks done: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 11 * 32,
    string(savestats.melee_attacks_done)
    );
//Bullet attacks done
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 12 * 32,
    "Bullet Attacks done: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 12 * 32,
    string(savestats.bullet_attacks_done)
    );
//Prim attacks done
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 13 * 32,
    "Sec Attacks done: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 13 * 32,
    string(savestats.sec_attacks_done)
    );
//Prim attacks done
draw_text(
    stats_menu_rectangle_left_bg_x1 + 32,
    stats_menu_rectangle_left_bg_y1 + 32 + 14 * 32,
    "Mag Attacks done: "
    
    );
draw_text(
    stats_menu_rectangle_left_bg_x2 - 150,
    stats_menu_rectangle_left_bg_y1 + 32 + 14 * 32,
    string(savestats.mag_attacks_done)
    );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
