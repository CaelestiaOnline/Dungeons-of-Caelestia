<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_charakter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats

//Höhe und Breite des Sprite
spr_hoehe = sprite_get_height(spr_charakter) / 2;
spr_breite = sprite_get_width(spr_charakter) / 2;

//Bewegung
move_right = 1;
move_left = 1;
move_down = 1;
move_up = 1;

//Nahkampfangriff
countdown_erzeugen = 0;
schlagrichtung = 0;

//Stats
hp = 100;
mana = 100;
ausdauer = 100;
angriffsgeschwindigkeit = 20;
geschwindigkeit = 5;
beschleunigung = 0.2;
abbremsung = 0.5;

//Angriffsauswahl
angriff = 1;

//Fernkampf
fernkampf = instance_create(0, 0, obj_Fernkampf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aktionen des Charakters

//Bewegung
//Beschleunigung
if(global.kb_d) 
{
    x += move_right;
    move_right += beschleunigung;
    if(move_right &gt; geschwindigkeit)
    {
        move_right = geschwindigkeit;
    }
}
if(global.kb_a) 
{
    x -= move_left;
    move_left += beschleunigung;
    if(move_left &gt; geschwindigkeit)
    {
        move_left = geschwindigkeit;
    }
}
if(global.kb_s)
{
    y += move_down;
    move_down += beschleunigung;
    if(move_down &gt; geschwindigkeit)
    {
        move_down = geschwindigkeit;
    }
}
if(global.kb_w)
{
    y -= move_up;
    move_up += beschleunigung;
    if(move_up &gt; geschwindigkeit)
    {
        move_up = geschwindigkeit;
    }
}

//Abbremsung
if(global.kb_d=false) 
{
    x += move_right;
    move_right -= abbremsung;
    if(move_right &lt; 0)
    {
        move_right = 0;
    }
}
if(global.kb_a = false) 
{
    x -= move_left;
    move_left -= abbremsung;
    if(move_left &lt; 0)
    {
        move_left = 0;
    }
}
if(global.kb_s = false) 
{
    y += move_down;
    move_down -= abbremsung;
    if(move_down &lt; 0)
    {
        move_down = 0;
    }
}
if(global.kb_w = false) 
{
    y -= move_up;
    move_up -= abbremsung;
    if(move_up &lt; 0)
    {
        move_up = 0;
    }
}

//Bewegung über Rand verhindern
if(x - spr_breite &lt; 0)
{
    x = spr_breite;
}
if(y - spr_hoehe &lt; 0)
{
    y = spr_hoehe;
}
if(x + spr_breite &gt; room_width)
{
    x = room_width - spr_breite;
}
if(y + spr_hoehe &gt; room_height)
{
    y = room_height - spr_hoehe;
}

//Angriff
//Angriffsrichtung
if(global.kb_d)
{
    schlagrichtung = 0;
}
if(global.kb_a)
{
    schlagrichtung = 1;
}

//Kollision mit Hindernissen
if(place_meeting(x,y - move_up,obj_hindernis))
{
    while(!place_meeting(x,y - 1,obj_hindernis))
    {
        y -= 1;
    }
    move_up = 0;
}
if(place_meeting(x,y + move_down,obj_hindernis))
{
    while(!place_meeting(x,y + 1,obj_hindernis))
    {
        y += 1;
    }
    move_down = 0;
}
if(place_meeting(x - move_left,y,obj_hindernis))
{
    while(!place_meeting(x - 1,y,obj_hindernis))
    {
        x -= 1;
    }
    move_left = 0;
}
if(place_meeting(x + move_right,y,obj_hindernis))
{
    while(!place_meeting(x + 1,y,obj_hindernis))
    {
        x += 1;
    }
    move_right = 0;
}

//Tod
if(hp &lt;= 0)
{
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP
draw_self();
draw_text(view_xview[0] + 100, view_yview[0] + 16, "HP: " + string(hp));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
