<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_charakter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Höhe und Breite des Sprite
spr_hoehe=sprite_get_height(spr_charakter)/2;
spr_breite=sprite_get_width(spr_charakter)/2;
//Bewegung
move_right=1;
move_left=1;
move_down=1;
move_up=1;
//Nahkampfangriff
countdown_erzeugen=0;
schlagrichtung = 0;
//stats
hp=100;
mana=100;
ausdauer=100;
angriffsgeschwindigkeit=20;
geschwindigkeit=5;
beschleunigung=0.2;
abbremsung=0.5;
//Angriffsauswahl
angriff=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Bewegung
if(keyboard_check(ord("D"))) 
{
    x+=move_right;
    move_right+=beschleunigung;
    if(move_right&gt;geschwindigkeit)
    {
        move_right=geschwindigkeit;
    }
}
if(keyboard_check(ord("A"))) 
{
    x-=move_left;
    move_left+=beschleunigung;
    if(move_left&gt;geschwindigkeit)
    {
        move_left=geschwindigkeit;
    }
}
if(keyboard_check(ord("S")))
{
    y+=move_down;
    move_down+=beschleunigung;
    if(move_down&gt;geschwindigkeit)
    {
        move_down=geschwindigkeit;
    }
}
if(keyboard_check(ord("W")))
{
    y-=move_up;
    move_up+=beschleunigung;
    if(move_up&gt;geschwindigkeit)
    {
        move_up=geschwindigkeit;
    }
}
if(keyboard_check(ord("D"))=false) 
{
    x+=move_right;
    move_right-=abbremsung;
    if(move_right&lt;0)
    {
        move_right=0;
    }
}
if(keyboard_check(ord("A"))=false) 
{
    x-=move_left;
    move_left-=abbremsung;
    if(move_left&lt;0)
    {
        move_left=0;
    }
}
if(keyboard_check(ord("S"))=false) 
{
    y+=move_down;
    move_down-=abbremsung;
    if(move_down&lt;0)
    {
        move_down=0;
    }
}
if(keyboard_check(ord("W"))=false) 
{
    y-=move_up;
    move_up-=abbremsung;
    if(move_up&lt;0)
    {
        move_up=0;
    }
}
//Bewegung über Rand verhindern
if(x-spr_breite&lt;0)
{
    x=spr_breite;
}
if(y-spr_hoehe&lt;0)
{
    y=spr_hoehe;
}
if(x+spr_breite&gt;room_width)
{
    x=room_width-spr_breite;
}
if(y+spr_hoehe&gt;room_height)
{
    y=room_height-spr_hoehe;
}
//Nahkampfangriff
if(keyboard_check_pressed(ord("D")))
{
    schlagrichtung=0;
}
if(keyboard_check_pressed(ord("A")))
{
    schlagrichtung=1;
}
if(angriff=0)
{
    if(keyboard_check(vk_space) &amp;&amp; schlagrichtung=0)
    {
        if(countdown_erzeugen==0)
        {
           instance_create(x+spr_breite,y,obj_hitbox_nahkampf);
        }
        if(countdown_erzeugen&lt;0)
        {
            countdown_erzeugen=angriffsgeschwindigkeit;
        }
        countdown_erzeugen--;
    }
    if(keyboard_check(vk_space) &amp;&amp; schlagrichtung=1)
    {
        if(countdown_erzeugen==0)
        {
            instance_create(x-spr_breite-sprite_get_width(spr_Hitbox),y,obj_hitbox_nahkampf);
       }
       if(countdown_erzeugen&lt;0)
        {
            countdown_erzeugen=angriffsgeschwindigkeit;
        }
        countdown_erzeugen--;
    }
}
else
{
     if(keyboard_check(vk_space) &amp;&amp; schlagrichtung=0)
    {
        if(countdown_erzeugen==0)
        {
           instance_create(x+spr_breite,y,obj_bullet2);
           obj_bullet2.direction=0;
        }
        if(countdown_erzeugen&lt;0)
        {
            countdown_erzeugen=angriffsgeschwindigkeit;
        }
        countdown_erzeugen--;
    }
    if(keyboard_check(vk_space) &amp;&amp; schlagrichtung=1)
    {
        if(countdown_erzeugen==0)
        {
            instance_create(x-spr_breite-sprite_get_width(spr_bullet),y,obj_bullet);
            obj_bullet.direction=180;
       }
       if(countdown_erzeugen&lt;0)
        {
            countdown_erzeugen=angriffsgeschwindigkeit;
       }
       countdown_erzeugen--;
    }
}
if(keyboard_check_released(vk_space))
{
    countdown_erzeugen=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
